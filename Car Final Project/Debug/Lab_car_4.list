
Lab_car_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d44  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003e80  08003e80  00013e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003eec  08003eec  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08003eec  08003eec  00013eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ef4  08003ef4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef4  08003ef4  00013ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000020  08003f1c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08003f1c  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c68a  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dde  00000000  00000000  0002c716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c00  00000000  00000000  0002e4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000950  00000000  00000000  0002f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b83  00000000  00000000  0002fa48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4f7  00000000  00000000  000455cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c077  00000000  00000000  00052ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000325c  00000000  00000000  000deb3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000e1d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000020 	.word	0x20000020
 8000158:	00000000 	.word	0x00000000
 800015c:	08003e68 	.word	0x08003e68

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000024 	.word	0x20000024
 8000178:	08003e68 	.word	0x08003e68

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <reset_CCRs>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/// --------------------------- MOTOR FUNCTIONS ---------------------------
static inline void reset_CCRs(){
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
    TIM3->CCR1 = 0;
 8000480:	4b07      	ldr	r3, [pc, #28]	; (80004a0 <reset_CCRs+0x24>)
 8000482:	2200      	movs	r2, #0
 8000484:	635a      	str	r2, [r3, #52]	; 0x34
    TIM3->CCR2 = 0;
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <reset_CCRs+0x24>)
 8000488:	2200      	movs	r2, #0
 800048a:	639a      	str	r2, [r3, #56]	; 0x38
    TIM3->CCR3 = 0;
 800048c:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <reset_CCRs+0x24>)
 800048e:	2200      	movs	r2, #0
 8000490:	63da      	str	r2, [r3, #60]	; 0x3c
    TIM3->CCR4 = 0;
 8000492:	4b03      	ldr	r3, [pc, #12]	; (80004a0 <reset_CCRs+0x24>)
 8000494:	2200      	movs	r2, #0
 8000496:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr
 80004a0:	40000400 	.word	0x40000400

080004a4 <backward>:

void backward(){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
   reset_CCRs();
 80004aa:	f7ff ffe7 	bl	800047c <reset_CCRs>
   /// PWM duty cycle
//   TIM3->CCR1 = 3/4*currentMaxSpeed;
//   TIM3->CCR4 = 3/4*currentMaxSpeed;
   TIM3->CCR1 = currentMaxSpeed;
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <backward+0x3c>)
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <backward+0x40>)
 80004b4:	635a      	str	r2, [r3, #52]	; 0x34
   TIM3->CCR4 = currentMaxSpeed;
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <backward+0x3c>)
 80004b8:	681a      	ldr	r2, [r3, #0]
 80004ba:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <backward+0x40>)
 80004bc:	641a      	str	r2, [r3, #64]	; 0x40

   uint8_t message[10] = "\nbackward\n";
 80004be:	4a0a      	ldr	r2, [pc, #40]	; (80004e8 <backward+0x44>)
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80004c4:	c303      	stmia	r3!, {r0, r1}
 80004c6:	801a      	strh	r2, [r3, #0]
   HAL_UART_Transmit(&huart1, message , 10, 10000);
 80004c8:	1d39      	adds	r1, r7, #4
 80004ca:	f242 7310 	movw	r3, #10000	; 0x2710
 80004ce:	220a      	movs	r2, #10
 80004d0:	4806      	ldr	r0, [pc, #24]	; (80004ec <backward+0x48>)
 80004d2:	f002 fe1f 	bl	8003114 <HAL_UART_Transmit>
}
 80004d6:	bf00      	nop
 80004d8:	3710      	adds	r7, #16
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000004 	.word	0x20000004
 80004e4:	40000400 	.word	0x40000400
 80004e8:	08003e80 	.word	0x08003e80
 80004ec:	20000110 	.word	0x20000110

080004f0 <forward>:

void forward(){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b084      	sub	sp, #16
 80004f4:	af00      	add	r7, sp, #0
  reset_CCRs();
 80004f6:	f7ff ffc1 	bl	800047c <reset_CCRs>
  /// PWM duty cycle
//  TIM3->CCR2 = 3/4*currentMaxSpeed;
//  TIM3->CCR3 = 3/4*currentMaxSpeed;
  TIM3->CCR2 = currentMaxSpeed;
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <forward+0x3c>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <forward+0x40>)
 8000500:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR3 = currentMaxSpeed;
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <forward+0x3c>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <forward+0x40>)
 8000508:	63da      	str	r2, [r3, #60]	; 0x3c

//  TIM3->CCR2 = 13;
//  TIM3->CCR3 = 13;
  uint8_t message[9] = "\nforward\n";
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <forward+0x44>)
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000510:	c303      	stmia	r3!, {r0, r1}
 8000512:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, message , 9, 10000);
 8000514:	1d39      	adds	r1, r7, #4
 8000516:	f242 7310 	movw	r3, #10000	; 0x2710
 800051a:	2209      	movs	r2, #9
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <forward+0x48>)
 800051e:	f002 fdf9 	bl	8003114 <HAL_UART_Transmit>
}
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000004 	.word	0x20000004
 8000530:	40000400 	.word	0x40000400
 8000534:	08003e8c 	.word	0x08003e8c
 8000538:	20000110 	.word	0x20000110

0800053c <left>:

void left(){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
  reset_CCRs();
 8000542:	f7ff ff9b 	bl	800047c <reset_CCRs>
  /// PWM duty cycle
  TIM3->CCR3 = currentMaxSpeed;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <left+0x38>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <left+0x3c>)
 800054c:	63da      	str	r2, [r3, #60]	; 0x3c
//  TIM3->CCR3 = 15;
//  TIM3->CCR2 = currentMaxSpeed * 2/4; // other slower

  uint8_t message[6] = "\nleft\n";
 800054e:	4a0b      	ldr	r2, [pc, #44]	; (800057c <left+0x40>)
 8000550:	463b      	mov	r3, r7
 8000552:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000556:	6018      	str	r0, [r3, #0]
 8000558:	3304      	adds	r3, #4
 800055a:	8019      	strh	r1, [r3, #0]
  HAL_UART_Transmit(&huart1, message , 6, 10000);
 800055c:	4639      	mov	r1, r7
 800055e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000562:	2206      	movs	r2, #6
 8000564:	4806      	ldr	r0, [pc, #24]	; (8000580 <left+0x44>)
 8000566:	f002 fdd5 	bl	8003114 <HAL_UART_Transmit>
}
 800056a:	bf00      	nop
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000004 	.word	0x20000004
 8000578:	40000400 	.word	0x40000400
 800057c:	08003e98 	.word	0x08003e98
 8000580:	20000110 	.word	0x20000110

08000584 <right>:

void right(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  reset_CCRs();
 800058a:	f7ff ff77 	bl	800047c <reset_CCRs>
  /// PWM duty cycle
  TIM3->CCR2 = currentMaxSpeed;
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <right+0x3c>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <right+0x40>)
 8000594:	639a      	str	r2, [r3, #56]	; 0x38
//  TIM3->CCR2 = 15;
//  TIM3->CCR3 = currentMaxSpeed * 2/4; // other slower

  uint8_t message[7] = "\nright\n";
 8000596:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <right+0x44>)
 8000598:	463b      	mov	r3, r7
 800059a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800059e:	6018      	str	r0, [r3, #0]
 80005a0:	3304      	adds	r3, #4
 80005a2:	8019      	strh	r1, [r3, #0]
 80005a4:	3302      	adds	r3, #2
 80005a6:	0c0a      	lsrs	r2, r1, #16
 80005a8:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, message , 7, 10000);
 80005aa:	4639      	mov	r1, r7
 80005ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80005b0:	2207      	movs	r2, #7
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <right+0x48>)
 80005b4:	f002 fdae 	bl	8003114 <HAL_UART_Transmit>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000004 	.word	0x20000004
 80005c4:	40000400 	.word	0x40000400
 80005c8:	08003ea0 	.word	0x08003ea0
 80005cc:	20000110 	.word	0x20000110

080005d0 <stop>:

static inline void stop(){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
  reset_CCRs();
 80005d6:	f7ff ff51 	bl	800047c <reset_CCRs>

  uint8_t message[6] = "\nstop\n";
 80005da:	4a09      	ldr	r2, [pc, #36]	; (8000600 <stop+0x30>)
 80005dc:	463b      	mov	r3, r7
 80005de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005e2:	6018      	str	r0, [r3, #0]
 80005e4:	3304      	adds	r3, #4
 80005e6:	8019      	strh	r1, [r3, #0]
  HAL_UART_Transmit(&huart1, message , 6, 10000);
 80005e8:	4639      	mov	r1, r7
 80005ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80005ee:	2206      	movs	r2, #6
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <stop+0x34>)
 80005f2:	f002 fd8f 	bl	8003114 <HAL_UART_Transmit>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	08003ea8 	.word	0x08003ea8
 8000604:	20000110 	.word	0x20000110

08000608 <TIM4_IRQHandler>:

/// --------------------------- IRQs ---------------------------


void TIM4_IRQHandler(void) {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
  /// delay handler
  if((TIM4->SR & 0b0100) != 0){
 800060e:	4b42      	ldr	r3, [pc, #264]	; (8000718 <TIM4_IRQHandler+0x110>)
 8000610:	691b      	ldr	r3, [r3, #16]
 8000612:	f003 0304 	and.w	r3, r3, #4
 8000616:	2b00      	cmp	r3, #0
 8000618:	d024      	beq.n	8000664 <TIM4_IRQHandler+0x5c>
//     TIM4->CCR3 += BuzzerFreq;
    if(startFlag == 0){
 800061a:	4b40      	ldr	r3, [pc, #256]	; (800071c <TIM4_IRQHandler+0x114>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d11a      	bne.n	8000658 <TIM4_IRQHandler+0x50>
       startFlag = 1;
 8000622:	4b3e      	ldr	r3, [pc, #248]	; (800071c <TIM4_IRQHandler+0x114>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
       TIM4->CCER |= 0b100000000;
 8000628:	4b3b      	ldr	r3, [pc, #236]	; (8000718 <TIM4_IRQHandler+0x110>)
 800062a:	6a1b      	ldr	r3, [r3, #32]
 800062c:	4a3a      	ldr	r2, [pc, #232]	; (8000718 <TIM4_IRQHandler+0x110>)
 800062e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000632:	6213      	str	r3, [r2, #32]
       prevState = START_STATE;
 8000634:	4b3a      	ldr	r3, [pc, #232]	; (8000720 <TIM4_IRQHandler+0x118>)
 8000636:	2204      	movs	r2, #4
 8000638:	701a      	strb	r2, [r3, #0]

       //start motors timer (TIM3)
       TIM3->CR1 |= 0x0001; // CEN = 1 -> Start counter
 800063a:	4b3a      	ldr	r3, [pc, #232]	; (8000724 <TIM4_IRQHandler+0x11c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a39      	ldr	r2, [pc, #228]	; (8000724 <TIM4_IRQHandler+0x11c>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6013      	str	r3, [r2, #0]
       TIM3->EGR |= 0x0001; // UG = 1 -> Generate update
 8000646:	4b37      	ldr	r3, [pc, #220]	; (8000724 <TIM4_IRQHandler+0x11c>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a36      	ldr	r2, [pc, #216]	; (8000724 <TIM4_IRQHandler+0x11c>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6153      	str	r3, [r2, #20]
       TIM3->SR = 0;
 8000652:	4b34      	ldr	r3, [pc, #208]	; (8000724 <TIM4_IRQHandler+0x11c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
    }

     TIM4->SR &= ~0b0100 ;
 8000658:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <TIM4_IRQHandler+0x110>)
 800065a:	691b      	ldr	r3, [r3, #16]
 800065c:	4a2e      	ldr	r2, [pc, #184]	; (8000718 <TIM4_IRQHandler+0x110>)
 800065e:	f023 0304 	bic.w	r3, r3, #4
 8000662:	6113      	str	r3, [r2, #16]
  }
  /// buzzer handler
  if((TIM4->SR & 0b1000) != 0){
 8000664:	4b2c      	ldr	r3, [pc, #176]	; (8000718 <TIM4_IRQHandler+0x110>)
 8000666:	691b      	ldr	r3, [r3, #16]
 8000668:	f003 0308 	and.w	r3, r3, #8
 800066c:	2b00      	cmp	r3, #0
 800066e:	d00b      	beq.n	8000688 <TIM4_IRQHandler+0x80>
     TIM4->CCR3 += BuzzerFreq;
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <TIM4_IRQHandler+0x110>)
 8000672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000674:	4a28      	ldr	r2, [pc, #160]	; (8000718 <TIM4_IRQHandler+0x110>)
 8000676:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800067a:	63d3      	str	r3, [r2, #60]	; 0x3c
     TIM4->SR &= ~0b1000 ;
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <TIM4_IRQHandler+0x110>)
 800067e:	691b      	ldr	r3, [r3, #16]
 8000680:	4a25      	ldr	r2, [pc, #148]	; (8000718 <TIM4_IRQHandler+0x110>)
 8000682:	f023 0308 	bic.w	r3, r3, #8
 8000686:	6113      	str	r3, [r2, #16]
  }

  /// sensors handler
  // channel 1, so bit 2
  if((TIM4->SR & 0b0010) != 0){
 8000688:	4b23      	ldr	r3, [pc, #140]	; (8000718 <TIM4_IRQHandler+0x110>)
 800068a:	691b      	ldr	r3, [r3, #16]
 800068c:	f003 0302 	and.w	r3, r3, #2
 8000690:	2b00      	cmp	r3, #0
 8000692:	d03b      	beq.n	800070c <TIM4_IRQHandler+0x104>
    int L = GPIOC->IDR & (1<<SensorL);
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <TIM4_IRQHandler+0x120>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	607b      	str	r3, [r7, #4]
    int R = GPIOC->IDR & (1<<SensorR);
 800069e:	4b22      	ldr	r3, [pc, #136]	; (8000728 <TIM4_IRQHandler+0x120>)
 80006a0:	691b      	ldr	r3, [r3, #16]
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	603b      	str	r3, [r7, #0]

    if(L && R){ // black line, stop
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d006      	beq.n	80006bc <TIM4_IRQHandler+0xb4>
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d003      	beq.n	80006bc <TIM4_IRQHandler+0xb4>
        state = SS;
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <TIM4_IRQHandler+0x124>)
 80006b6:	2203      	movs	r2, #3
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	e01c      	b.n	80006f6 <TIM4_IRQHandler+0xee>
    }else if(!L && !R){ // forward
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d106      	bne.n	80006d0 <TIM4_IRQHandler+0xc8>
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d103      	bne.n	80006d0 <TIM4_IRQHandler+0xc8>
        state = FS;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <TIM4_IRQHandler+0x124>)
 80006ca:	2202      	movs	r2, #2
 80006cc:	701a      	strb	r2, [r3, #0]
 80006ce:	e012      	b.n	80006f6 <TIM4_IRQHandler+0xee>
    }else if(!L && R){ // turn right
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d106      	bne.n	80006e4 <TIM4_IRQHandler+0xdc>
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d003      	beq.n	80006e4 <TIM4_IRQHandler+0xdc>
        state = RS;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <TIM4_IRQHandler+0x124>)
 80006de:	2200      	movs	r2, #0
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	e008      	b.n	80006f6 <TIM4_IRQHandler+0xee>
    }else if(L && !R){ // turn left
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d005      	beq.n	80006f6 <TIM4_IRQHandler+0xee>
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d102      	bne.n	80006f6 <TIM4_IRQHandler+0xee>
        state = LS;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <TIM4_IRQHandler+0x124>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
    }

    TIM4->CCR1 += SensorFreq; // update comparison time
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <TIM4_IRQHandler+0x110>)
 80006f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <TIM4_IRQHandler+0x110>)
 80006fc:	330a      	adds	r3, #10
 80006fe:	6353      	str	r3, [r2, #52]	; 0x34
    TIM4->SR &= ~0b0010 ; // Clear flag of CH1
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <TIM4_IRQHandler+0x110>)
 8000702:	691b      	ldr	r3, [r3, #16]
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <TIM4_IRQHandler+0x110>)
 8000706:	f023 0302 	bic.w	r3, r3, #2
 800070a:	6113      	str	r3, [r2, #16]
  }
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40000800 	.word	0x40000800
 800071c:	20000158 	.word	0x20000158
 8000720:	20000001 	.word	0x20000001
 8000724:	40000400 	.word	0x40000400
 8000728:	40020800 	.word	0x40020800
 800072c:	20000000 	.word	0x20000000

08000730 <EXTI0_IRQHandler>:


/// button handling
void EXTI0_IRQHandler(void){
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  if (EXTI->PR!=0){
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <EXTI0_IRQHandler+0x28>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d008      	beq.n	800074e <EXTI0_IRQHandler+0x1e>
    TIM4->CR1 |= 0x0001; // CEN = 1 -> Start counter of TIM4
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <EXTI0_IRQHandler+0x2c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a06      	ldr	r2, [pc, #24]	; (800075c <EXTI0_IRQHandler+0x2c>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]
    EXTI->PR = 0x01;
 8000748:	4b03      	ldr	r3, [pc, #12]	; (8000758 <EXTI0_IRQHandler+0x28>)
 800074a:	2201      	movs	r2, #1
 800074c:	615a      	str	r2, [r3, #20]
  }
}
 800074e:	bf00      	nop
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40010400 	.word	0x40010400
 800075c:	40000800 	.word	0x40000800

08000760 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 fe14 	bl	8001392 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 fac1 	bl	8000cf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 fc33 	bl	8000fd8 <MX_GPIO_Init>
  MX_ADC_Init();
 8000772:	f000 fb0b 	bl	8000d8c <MX_ADC_Init>
  MX_TS_Init();
 8000776:	f000 fbff 	bl	8000f78 <MX_TS_Init>
  MX_TIM4_Init();
 800077a:	f000 fbaf 	bl	8000edc <MX_TIM4_Init>
  MX_TIM3_Init();
 800077e:	f000 fb5f 	bl	8000e40 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000782:	f000 fbff 	bl	8000f84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /// ----------------------------- user button as EXTI ----------------------------

    GPIOA->MODER &= ~(0b11);
 8000786:	4b9a      	ldr	r3, [pc, #616]	; (80009f0 <main+0x290>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a99      	ldr	r2, [pc, #612]	; (80009f0 <main+0x290>)
 800078c:	f023 0303 	bic.w	r3, r3, #3
 8000790:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= 0x01; // Enables falling edge in EXTI0
 8000792:	4b98      	ldr	r3, [pc, #608]	; (80009f4 <main+0x294>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	4a97      	ldr	r2, [pc, #604]	; (80009f4 <main+0x294>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	60d3      	str	r3, [r2, #12]
    EXTI->RTSR &= ~(0x01); // Disables rising edge in EXTI0
 800079e:	4b95      	ldr	r3, [pc, #596]	; (80009f4 <main+0x294>)
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	4a94      	ldr	r2, [pc, #592]	; (80009f4 <main+0x294>)
 80007a4:	f023 0301 	bic.w	r3, r3, #1
 80007a8:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] = 0; // EXTI0 linked to GPIOA (i.e. USER button = PA0)
 80007aa:	4b93      	ldr	r3, [pc, #588]	; (80009f8 <main+0x298>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
    EXTI->IMR |= 0x01; // Enables EXTI0
 80007b0:	4b90      	ldr	r3, [pc, #576]	; (80009f4 <main+0x294>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a8f      	ldr	r2, [pc, #572]	; (80009f4 <main+0x294>)
 80007b6:	f043 0301 	orr.w	r3, r3, #1
 80007ba:	6013      	str	r3, [r2, #0]
    NVIC->ISER[0] |= (1 << 6);  // Enables IRQ for EXTI0 (6th position)
 80007bc:	4b8f      	ldr	r3, [pc, #572]	; (80009fc <main+0x29c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a8e      	ldr	r2, [pc, #568]	; (80009fc <main+0x29c>)
 80007c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c6:	6013      	str	r3, [r2, #0]
                                // the flag is activated, the IRQ is launched to the NVIC,
                                // the NVIC activates the external IRQ signal.
                                // The CPU calls the EXTI0 ISR

  /// initialize motor pins as AFR
    GPIOC->MODER &= ~(   0b11 * (1<<(2*M_L_CW))
 80007c8:	4b8d      	ldr	r3, [pc, #564]	; (8000a00 <main+0x2a0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a8c      	ldr	r2, [pc, #560]	; (8000a00 <main+0x2a0>)
 80007ce:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 80007d2:	6013      	str	r3, [r2, #0]
                      |  0b11 * (1<<(2*M_L_CCW))
                      |  0b11 * (1<<(2*M_R_CW))
                      |  0b11 * (1<<(2*M_R_CCW)) );

    GPIOC->MODER |= (    0b10 * (1<<(2*M_L_CW))
 80007d4:	4b8a      	ldr	r3, [pc, #552]	; (8000a00 <main+0x2a0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a89      	ldr	r2, [pc, #548]	; (8000a00 <main+0x2a0>)
 80007da:	f443 232a 	orr.w	r3, r3, #696320	; 0xaa000
 80007de:	6013      	str	r3, [r2, #0]
                      |  0b10 * (1<<(2*M_R_CCW)) );

    /// associate with TIM3
//    GPIOC->AFR[0] = 0;
//    GPIOC->AFR[1] = 0;
    GPIOC->AFR[0] &=  ~( 0b1111 << (4*M_L_CW)
 80007e0:	4b87      	ldr	r3, [pc, #540]	; (8000a00 <main+0x2a0>)
 80007e2:	6a1b      	ldr	r3, [r3, #32]
 80007e4:	4a86      	ldr	r2, [pc, #536]	; (8000a00 <main+0x2a0>)
 80007e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80007ea:	6213      	str	r3, [r2, #32]
                       | 0b1111 << (4*M_L_CCW));
    GPIOC->AFR[1] &=  ~( 0b1111 << (4*(M_R_CW - 8))
 80007ec:	4b84      	ldr	r3, [pc, #528]	; (8000a00 <main+0x2a0>)
 80007ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f0:	4a83      	ldr	r2, [pc, #524]	; (8000a00 <main+0x2a0>)
 80007f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80007f6:	6253      	str	r3, [r2, #36]	; 0x24
                       | 0b1111 << (4*(M_R_CCW - 8)));

    GPIOC->AFR[0] |=       0b10 << (4*M_L_CW)
 80007f8:	4b81      	ldr	r3, [pc, #516]	; (8000a00 <main+0x2a0>)
 80007fa:	6a1b      	ldr	r3, [r3, #32]
 80007fc:	4a80      	ldr	r2, [pc, #512]	; (8000a00 <main+0x2a0>)
 80007fe:	f043 5308 	orr.w	r3, r3, #570425344	; 0x22000000
 8000802:	6213      	str	r3, [r2, #32]
                         | 0b10 << (4*M_L_CCW);
   GPIOC->AFR[1] |=       0b10 << (4*(M_R_CW - 8))
 8000804:	4b7e      	ldr	r3, [pc, #504]	; (8000a00 <main+0x2a0>)
 8000806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000808:	4a7d      	ldr	r2, [pc, #500]	; (8000a00 <main+0x2a0>)
 800080a:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 800080e:	6253      	str	r3, [r2, #36]	; 0x24
                         | 0b10 << (4*(M_R_CCW - 8));

  /// buzzer
  // as output
  GPIOB->MODER &= ~( 0b11 * (1<<(2*Buzzer)));
 8000810:	4b7c      	ldr	r3, [pc, #496]	; (8000a04 <main+0x2a4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a7b      	ldr	r2, [pc, #492]	; (8000a04 <main+0x2a4>)
 8000816:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800081a:	6013      	str	r3, [r2, #0]
  GPIOB->MODER |= 0b10 * (1<<(2*Buzzer));
 800081c:	4b79      	ldr	r3, [pc, #484]	; (8000a04 <main+0x2a4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a78      	ldr	r2, [pc, #480]	; (8000a04 <main+0x2a4>)
 8000822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000826:	6013      	str	r3, [r2, #0]
  // AFR
  GPIOB->AFR[1] &= ~(0b1111);
 8000828:	4b76      	ldr	r3, [pc, #472]	; (8000a04 <main+0x2a4>)
 800082a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082c:	4a75      	ldr	r2, [pc, #468]	; (8000a04 <main+0x2a4>)
 800082e:	f023 030f 	bic.w	r3, r3, #15
 8000832:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOB->AFR[1] |= 0b0010;
 8000834:	4b73      	ldr	r3, [pc, #460]	; (8000a04 <main+0x2a4>)
 8000836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000838:	4a72      	ldr	r2, [pc, #456]	; (8000a04 <main+0x2a4>)
 800083a:	f043 0302 	orr.w	r3, r3, #2
 800083e:	6253      	str	r3, [r2, #36]	; 0x24
  // buzzer timer
  TIM4->CCR3 = BuzzerFreq; // channel 3
 8000840:	4b71      	ldr	r3, [pc, #452]	; (8000a08 <main+0x2a8>)
 8000842:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000846:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCMR2 &= ~(0x00FF);
 8000848:	4b6f      	ldr	r3, [pc, #444]	; (8000a08 <main+0x2a8>)
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	4a6e      	ldr	r2, [pc, #440]	; (8000a08 <main+0x2a8>)
 800084e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000852:	61d3      	str	r3, [r2, #28]
  TIM4->CCMR2 |= 0b0110000; // also TOC
 8000854:	4b6c      	ldr	r3, [pc, #432]	; (8000a08 <main+0x2a8>)
 8000856:	69db      	ldr	r3, [r3, #28]
 8000858:	4a6b      	ldr	r2, [pc, #428]	; (8000a08 <main+0x2a8>)
 800085a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800085e:	61d3      	str	r3, [r2, #28]

  // set buzzer to forward mode
  TIM4->CCMR2 &= ~(0x00FF);
 8000860:	4b69      	ldr	r3, [pc, #420]	; (8000a08 <main+0x2a8>)
 8000862:	69db      	ldr	r3, [r3, #28]
 8000864:	4a68      	ldr	r2, [pc, #416]	; (8000a08 <main+0x2a8>)
 8000866:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800086a:	61d3      	str	r3, [r2, #28]
  TIM4->CCMR2 |= 0b0010000;
 800086c:	4b66      	ldr	r3, [pc, #408]	; (8000a08 <main+0x2a8>)
 800086e:	69db      	ldr	r3, [r3, #28]
 8000870:	4a65      	ldr	r2, [pc, #404]	; (8000a08 <main+0x2a8>)
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	61d3      	str	r3, [r2, #28]

  /// ------------------------------ ADC setup --------------------------------------
    /// PA5

    GPIOA->MODER |= 0b11<<(2*5); // PA5 as analog
 8000878:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <main+0x290>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a5c      	ldr	r2, [pc, #368]	; (80009f0 <main+0x290>)
 800087e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000882:	6013      	str	r3, [r2, #0]
    ADC1->CR2 &= ~(0x00000001); // ADON = 0 (ADC powered off)
 8000884:	4b61      	ldr	r3, [pc, #388]	; (8000a0c <main+0x2ac>)
 8000886:	689b      	ldr	r3, [r3, #8]
 8000888:	4a60      	ldr	r2, [pc, #384]	; (8000a0c <main+0x2ac>)
 800088a:	f023 0301 	bic.w	r3, r3, #1
 800088e:	6093      	str	r3, [r2, #8]
    ADC1->CR1 = 0x00000000; // OVRIE = 0 (overrun IRQ disabled)
 8000890:	4b5e      	ldr	r3, [pc, #376]	; (8000a0c <main+0x2ac>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
                            // RES = 00 (resolution = 12 bits)
                            // SCAN = 0 (scan mode disabled)
                            // EOCIE = 0 (EOC IRQ disabled)
    ADC1->CR2 = 0b10000010010;  // EOCS = 1 (EOC is activated after each conv.)
 8000896:	4b5d      	ldr	r3, [pc, #372]	; (8000a0c <main+0x2ac>)
 8000898:	f240 4212 	movw	r2, #1042	; 0x412
 800089c:	609a      	str	r2, [r3, #8]
                                // DELS = 001 (delay till data is read)
                                // CONT = 1 (continuous conversion)
    ADC1->SQR1 = 0x00000000; // 1 channel in the sequence
 800089e:	4b5b      	ldr	r3, [pc, #364]	; (8000a0c <main+0x2ac>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
    ADC1->SQR5 = 0x00000005; // The selected channel is AIN5
 80008a4:	4b59      	ldr	r3, [pc, #356]	; (8000a0c <main+0x2ac>)
 80008a6:	2205      	movs	r2, #5
 80008a8:	641a      	str	r2, [r3, #64]	; 0x40
    ADC1->CR2 |= 0x00000001; // ADON = 1 (ADC powered on)
 80008aa:	4b58      	ldr	r3, [pc, #352]	; (8000a0c <main+0x2ac>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	4a57      	ldr	r2, [pc, #348]	; (8000a0c <main+0x2ac>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6093      	str	r3, [r2, #8]
    while ((ADC1->SR&0x0040)==0); // If ADCONS = 0, I wait till converter is ready
 80008b6:	bf00      	nop
 80008b8:	4b54      	ldr	r3, [pc, #336]	; (8000a0c <main+0x2ac>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d0f9      	beq.n	80008b8 <main+0x158>
    ADC1->CR2 |= 0x40000000; // When ADCONS = 1, I start conv. (SWSTART = 1)
 80008c4:	4b51      	ldr	r3, [pc, #324]	; (8000a0c <main+0x2ac>)
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	4a50      	ldr	r2, [pc, #320]	; (8000a0c <main+0x2ac>)
 80008ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80008ce:	6093      	str	r3, [r2, #8]


  /// initialize timer TIM4
  // CH3 - buzzer, CH1 - IR measurement
  TIM4->CR1 = 0x0000; // ARPE = 0 -> No PWM, it is TOC
 80008d0:	4b4d      	ldr	r3, [pc, #308]	; (8000a08 <main+0x2a8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
  // CEN = 0; Counter OFF
  TIM4->CR2 = 0x0000; // Always "0" in this course
 80008d6:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <main+0x2a8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  TIM4->SMCR = 0x0000; // Always "0" in this course
 80008dc:	4b4a      	ldr	r3, [pc, #296]	; (8000a08 <main+0x2a8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]

  TIM4->PSC = 32000 - 1; // prescaler makes measurements every 1ms
 80008e2:	4b49      	ldr	r3, [pc, #292]	; (8000a08 <main+0x2a8>)
 80008e4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
  TIM4->CNT = 0; // Initialize the counter to 0
 80008ea:	4b47      	ldr	r3, [pc, #284]	; (8000a08 <main+0x2a8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24
  TIM4->ARR = 0xFFFF; // Recommended value = FFFF
 80008f0:	4b45      	ldr	r3, [pc, #276]	; (8000a08 <main+0x2a8>)
 80008f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM4->DIER = 0b10; // interrupt enable CCyIE = 1
 80008f8:	4b43      	ldr	r3, [pc, #268]	; (8000a08 <main+0x2a8>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	60da      	str	r2, [r3, #12]

  ///---------------------- initialize TIM3 ----------------------
    /// PWM
    TIM3->CR1 = 0x0080; // ARPE = 1 -> Is PWM; CEN = 0; Counter OFF
 80008fe:	4b44      	ldr	r3, [pc, #272]	; (8000a10 <main+0x2b0>)
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	601a      	str	r2, [r3, #0]
    TIM3->CR2 = 0x0000; // Always 0 in this course
 8000904:	4b42      	ldr	r3, [pc, #264]	; (8000a10 <main+0x2b0>)
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
    TIM3->SMCR = 0x0000; // Always 0 in this course
 800090a:	4b41      	ldr	r3, [pc, #260]	; (8000a10 <main+0x2b0>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]

//    TIM3->PSC = 320-1;
//    TIM3->PSC = 32000-1;
    TIM3->PSC = 48000-1;
 8000910:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <main+0x2b0>)
 8000912:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->CNT = 0; // Initialize counter to 0
 8000918:	4b3d      	ldr	r3, [pc, #244]	; (8000a10 <main+0x2b0>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
    TIM3->ARR = 20; // PWM Frequency to 100 Hz and only 10 steps
 800091e:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <main+0x2b0>)
 8000920:	2214      	movs	r2, #20
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
    reset_CCRs(); // motors stopped at start
 8000924:	f7ff fdaa 	bl	800047c <reset_CCRs>
    //TIM3->CCR2 = 10;
    //TIM3->CCR1 = 10;
//    TIM3->CCR2 = 20;
    TIM3->DIER = 0x0000;
 8000928:	4b39      	ldr	r3, [pc, #228]	; (8000a10 <main+0x2b0>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
//    TIM3->CCMR1 = 0x6868; // CCyS = 0 (TOC, PWM)
                          // OCyM = 110 (PWM starting in 1)
                          // OCyPE = 1 (with preload)
    TIM3->CCMR1 = 0x6868;
 800092e:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <main+0x2b0>)
 8000930:	f646 0268 	movw	r2, #26728	; 0x6868
 8000934:	619a      	str	r2, [r3, #24]
    TIM3->CCMR2 = 0x6868;
 8000936:	4b36      	ldr	r3, [pc, #216]	; (8000a10 <main+0x2b0>)
 8000938:	f646 0268 	movw	r2, #26728	; 0x6868
 800093c:	61da      	str	r2, [r3, #28]
    TIM3->CCER = 0x1111;  // CCyP = 0 (always in PWM)
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <main+0x2b0>)
 8000940:	f241 1211 	movw	r2, #4369	; 0x1111
 8000944:	621a      	str	r2, [r3, #32]
                          // CCyE = 1 (hardware output activated)

   TIM3->CR1 |= 0x0001; // CEN = 1 -> Start counter
 8000946:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <main+0x2b0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a31      	ldr	r2, [pc, #196]	; (8000a10 <main+0x2b0>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6013      	str	r3, [r2, #0]
   TIM3->EGR |= 0x0001; // UG = 1 -> Generate update
 8000952:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <main+0x2b0>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a2e      	ldr	r2, [pc, #184]	; (8000a10 <main+0x2b0>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6153      	str	r3, [r2, #20]
   TIM3->SR = 0;
 800095e:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <main+0x2b0>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]


  /// sensors

  // as input (00)
  GPIOC->MODER &= ~( 0b11 * (1<<(2*SensorL)));
 8000964:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <main+0x2a0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a25      	ldr	r2, [pc, #148]	; (8000a00 <main+0x2a0>)
 800096a:	f023 030c 	bic.w	r3, r3, #12
 800096e:	6013      	str	r3, [r2, #0]
  GPIOC->MODER &= ~( 0b11 * (1<<(2*SensorR)));
 8000970:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <main+0x2a0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a22      	ldr	r2, [pc, #136]	; (8000a00 <main+0x2a0>)
 8000976:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800097a:	6013      	str	r3, [r2, #0]
  // sensors timer
  TIM4->CCR1 = SensorFreq; // channel 1
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <main+0x2a8>)
 800097e:	220a      	movs	r2, #10
 8000980:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCMR1 = 0x0000; // also TOC
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <main+0x2a8>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  // delay timer
  TIM4->CCR2 = 2000; // 2s
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <main+0x2a8>)
 800098a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800098e:	639a      	str	r2, [r3, #56]	; 0x38

  TIM4->CCER &= ~(0x0380); // CCyP = 0 (always in TOC)
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <main+0x2a8>)
 8000992:	6a1b      	ldr	r3, [r3, #32]
 8000994:	4a1c      	ldr	r2, [pc, #112]	; (8000a08 <main+0x2a8>)
 8000996:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800099a:	6213      	str	r3, [r2, #32]
//  TIM4->CCER |= 0b100000000; <- in EXTI

  // Counter enabling
  /// DONT start the counter
  TIM4->CR1 &= ~(1);
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <main+0x2a8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <main+0x2a8>)
 80009a2:	f023 0301 	bic.w	r3, r3, #1
 80009a6:	6013      	str	r3, [r2, #0]
//  TIM4->CR1 |= 0x0001; // CEN = 1 -> Start counter
  TIM4->EGR |= 0x0001; // UG = 1 -> Generate an update event to update all registers
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <main+0x2a8>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <main+0x2a8>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6153      	str	r3, [r2, #20]
  TIM4->SR = 0; // Clear counter flags
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <main+0x2a8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]

  /// Enabling TIM4_IRQ at NVIC (position 30).
  NVIC->ISER[0] |= (1 << 30);
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <main+0x29c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a0f      	ldr	r2, [pc, #60]	; (80009fc <main+0x29c>)
 80009c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80009c4:	6013      	str	r3, [r2, #0]


  HAL_UART_Receive_IT(&huart1, command , 1);
 80009c6:	2201      	movs	r2, #1
 80009c8:	4912      	ldr	r1, [pc, #72]	; (8000a14 <main+0x2b4>)
 80009ca:	4813      	ldr	r0, [pc, #76]	; (8000a18 <main+0x2b8>)
 80009cc:	f002 fc25 	bl	800321a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(command[0] != prevcommand[0]){
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <main+0x2b4>)
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <main+0x2bc>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d0f9      	beq.n	80009d0 <main+0x270>
      if(command[0] != 'A'){
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <main+0x2b4>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b41      	cmp	r3, #65	; 0x41
 80009e2:	d024      	beq.n	8000a2e <main+0x2ce>
        // turn off the buzzer
        TIM4->CCMR2 &= ~(0x00FF);
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <main+0x2a8>)
 80009e6:	69db      	ldr	r3, [r3, #28]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <main+0x2a8>)
 80009ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80009ee:	e017      	b.n	8000a20 <main+0x2c0>
 80009f0:	40020000 	.word	0x40020000
 80009f4:	40010400 	.word	0x40010400
 80009f8:	40010000 	.word	0x40010000
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020400 	.word	0x40020400
 8000a08:	40000800 	.word	0x40000800
 8000a0c:	40012400 	.word	0x40012400
 8000a10:	40000400 	.word	0x40000400
 8000a14:	20000008 	.word	0x20000008
 8000a18:	20000110 	.word	0x20000110
 8000a1c:	2000000c 	.word	0x2000000c
 8000a20:	61d3      	str	r3, [r2, #28]
        TIM4->CCMR2 |= 0b0010000; // pin to 1
 8000a22:	4ba4      	ldr	r3, [pc, #656]	; (8000cb4 <main+0x554>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	4aa3      	ldr	r2, [pc, #652]	; (8000cb4 <main+0x554>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	61d3      	str	r3, [r2, #28]
      }
      prevcommand[0] = command[0];
 8000a2e:	4ba2      	ldr	r3, [pc, #648]	; (8000cb8 <main+0x558>)
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	4ba2      	ldr	r3, [pc, #648]	; (8000cbc <main+0x55c>)
 8000a34:	701a      	strb	r2, [r3, #0]
      switch(command[0]){
 8000a36:	4ba0      	ldr	r3, [pc, #640]	; (8000cb8 <main+0x558>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	3b42      	subs	r3, #66	; 0x42
 8000a3c:	2b11      	cmp	r3, #17
 8000a3e:	d836      	bhi.n	8000aae <main+0x34e>
 8000a40:	a201      	add	r2, pc, #4	; (adr r2, 8000a48 <main+0x2e8>)
 8000a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a46:	bf00      	nop
 8000a48:	08000a9d 	.word	0x08000a9d
 8000a4c:	08000aaf 	.word	0x08000aaf
 8000a50:	08000aaf 	.word	0x08000aaf
 8000a54:	08000aaf 	.word	0x08000aaf
 8000a58:	08000a91 	.word	0x08000a91
 8000a5c:	08000aaf 	.word	0x08000aaf
 8000a60:	08000aaf 	.word	0x08000aaf
 8000a64:	08000aaf 	.word	0x08000aaf
 8000a68:	08000aaf 	.word	0x08000aaf
 8000a6c:	08000aaf 	.word	0x08000aaf
 8000a70:	08000aa3 	.word	0x08000aa3
 8000a74:	08000aaf 	.word	0x08000aaf
 8000a78:	08000aaf 	.word	0x08000aaf
 8000a7c:	08000aaf 	.word	0x08000aaf
 8000a80:	08000aaf 	.word	0x08000aaf
 8000a84:	08000aaf 	.word	0x08000aaf
 8000a88:	08000aa9 	.word	0x08000aa9
 8000a8c:	08000a97 	.word	0x08000a97
        case 'F':
          forward();
 8000a90:	f7ff fd2e 	bl	80004f0 <forward>
          break;
 8000a94:	e00c      	b.n	8000ab0 <main+0x350>
        case 'S':
          stop();
 8000a96:	f7ff fd9b 	bl	80005d0 <stop>
          break;
 8000a9a:	e009      	b.n	8000ab0 <main+0x350>
        case 'B':
          backward();
 8000a9c:	f7ff fd02 	bl	80004a4 <backward>
          break;
 8000aa0:	e006      	b.n	8000ab0 <main+0x350>
        case 'L':
          left();
 8000aa2:	f7ff fd4b 	bl	800053c <left>
          break;
 8000aa6:	e003      	b.n	8000ab0 <main+0x350>
        case 'R':
          right();
 8000aa8:	f7ff fd6c 	bl	8000584 <right>
          break;
 8000aac:	e000      	b.n	8000ab0 <main+0x350>
        default:
          break;
 8000aae:	bf00      	nop
      }
      // change of speed
      if('0' <= command[0] && command[0] <= '9'){
 8000ab0:	4b81      	ldr	r3, [pc, #516]	; (8000cb8 <main+0x558>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b2f      	cmp	r3, #47	; 0x2f
 8000ab6:	d93a      	bls.n	8000b2e <main+0x3ce>
 8000ab8:	4b7f      	ldr	r3, [pc, #508]	; (8000cb8 <main+0x558>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b39      	cmp	r3, #57	; 0x39
 8000abe:	d836      	bhi.n	8000b2e <main+0x3ce>
        speedModifier = command[0] - '0' + 1;
 8000ac0:	4b7d      	ldr	r3, [pc, #500]	; (8000cb8 <main+0x558>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	3b2f      	subs	r3, #47	; 0x2f
 8000ac6:	4a7e      	ldr	r2, [pc, #504]	; (8000cc0 <main+0x560>)
 8000ac8:	6013      	str	r3, [r2, #0]
        currentMaxSpeed = 10 + (ADC1->DR * 10 / (1<<12) * speedModifier/MAX_SPEED_MODIFIER);
 8000aca:	4b7e      	ldr	r3, [pc, #504]	; (8000cc4 <main+0x564>)
 8000acc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ace:	4613      	mov	r3, r2
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4413      	add	r3, r2
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	0b1b      	lsrs	r3, r3, #12
 8000ad8:	4a79      	ldr	r2, [pc, #484]	; (8000cc0 <main+0x560>)
 8000ada:	6812      	ldr	r2, [r2, #0]
 8000adc:	fb02 f303 	mul.w	r3, r2, r3
 8000ae0:	4a79      	ldr	r2, [pc, #484]	; (8000cc8 <main+0x568>)
 8000ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ae6:	08db      	lsrs	r3, r3, #3
 8000ae8:	330a      	adds	r3, #10
 8000aea:	461a      	mov	r2, r3
 8000aec:	4b77      	ldr	r3, [pc, #476]	; (8000ccc <main+0x56c>)
 8000aee:	601a      	str	r2, [r3, #0]


        uint8_t message[12] = "\nNew speed: ";
 8000af0:	4a77      	ldr	r2, [pc, #476]	; (8000cd0 <main+0x570>)
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000af8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        HAL_UART_Transmit(&huart1, message , 12, 10000);
 8000afc:	f107 0110 	add.w	r1, r7, #16
 8000b00:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b04:	220c      	movs	r2, #12
 8000b06:	4873      	ldr	r0, [pc, #460]	; (8000cd4 <main+0x574>)
 8000b08:	f002 fb04 	bl	8003114 <HAL_UART_Transmit>
//        command[0]++;
//        uint8_t message5[1] = command + 1;
        HAL_UART_Transmit(&huart1, command , 1, 10000);
 8000b0c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b10:	2201      	movs	r2, #1
 8000b12:	4969      	ldr	r1, [pc, #420]	; (8000cb8 <main+0x558>)
 8000b14:	486f      	ldr	r0, [pc, #444]	; (8000cd4 <main+0x574>)
 8000b16:	f002 fafd 	bl	8003114 <HAL_UART_Transmit>
        uint8_t message2[4] = "/9\n";
 8000b1a:	4b6f      	ldr	r3, [pc, #444]	; (8000cd8 <main+0x578>)
 8000b1c:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart1, message2 , 4, 10000);
 8000b1e:	f107 010c 	add.w	r1, r7, #12
 8000b22:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b26:	2204      	movs	r2, #4
 8000b28:	486a      	ldr	r0, [pc, #424]	; (8000cd4 <main+0x574>)
 8000b2a:	f002 faf3 	bl	8003114 <HAL_UART_Transmit>

      }


      // autonomous
      if(command[0] == 'A'){
 8000b2e:	4b62      	ldr	r3, [pc, #392]	; (8000cb8 <main+0x558>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b41      	cmp	r3, #65	; 0x41
 8000b34:	f47f af4c 	bne.w	80009d0 <main+0x270>
        uint8_t message[12] = "\nAutonomous\n";
 8000b38:	4a68      	ldr	r2, [pc, #416]	; (8000cdc <main+0x57c>)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        HAL_UART_Transmit(&huart1, message , 12, 10000);
 8000b42:	4639      	mov	r1, r7
 8000b44:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b48:	220c      	movs	r2, #12
 8000b4a:	4862      	ldr	r0, [pc, #392]	; (8000cd4 <main+0x574>)
 8000b4c:	f002 fae2 	bl	8003114 <HAL_UART_Transmit>
        int breakFlag = 1;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61fb      	str	r3, [r7, #28]
        while(breakFlag)
 8000b54:	e0a9      	b.n	8000caa <main+0x54a>
        if((state != prevState || currentMaxSpeed != 10 + (ADC1->DR * 10 / (1<<12)* speedModifier/MAX_SPEED_MODIFIER)) && startFlag){/// !!!!!!
 8000b56:	4b62      	ldr	r3, [pc, #392]	; (8000ce0 <main+0x580>)
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	4b62      	ldr	r3, [pc, #392]	; (8000ce4 <main+0x584>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d114      	bne.n	8000b8c <main+0x42c>
 8000b62:	4b58      	ldr	r3, [pc, #352]	; (8000cc4 <main+0x564>)
 8000b64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b66:	4613      	mov	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	0b1b      	lsrs	r3, r3, #12
 8000b70:	4a53      	ldr	r2, [pc, #332]	; (8000cc0 <main+0x560>)
 8000b72:	6812      	ldr	r2, [r2, #0]
 8000b74:	fb02 f303 	mul.w	r3, r2, r3
 8000b78:	4a53      	ldr	r2, [pc, #332]	; (8000cc8 <main+0x568>)
 8000b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b7e:	08db      	lsrs	r3, r3, #3
 8000b80:	330a      	adds	r3, #10
 8000b82:	4a52      	ldr	r2, [pc, #328]	; (8000ccc <main+0x56c>)
 8000b84:	6812      	ldr	r2, [r2, #0]
 8000b86:	4293      	cmp	r3, r2
 8000b88:	f000 808f 	beq.w	8000caa <main+0x54a>
 8000b8c:	4b56      	ldr	r3, [pc, #344]	; (8000ce8 <main+0x588>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	f000 808a 	beq.w	8000caa <main+0x54a>
        //      if((state != prevState ) && startFlag){/// !!!!!!
                  prevState = state;
 8000b96:	4b52      	ldr	r3, [pc, #328]	; (8000ce0 <main+0x580>)
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	4b52      	ldr	r3, [pc, #328]	; (8000ce4 <main+0x584>)
 8000b9c:	701a      	strb	r2, [r3, #0]
                  currentMaxSpeed = 10 + (ADC1->DR * 10 / (1<<12) * speedModifier/MAX_SPEED_MODIFIER);
 8000b9e:	4b49      	ldr	r3, [pc, #292]	; (8000cc4 <main+0x564>)
 8000ba0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	4413      	add	r3, r2
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	0b1b      	lsrs	r3, r3, #12
 8000bac:	4a44      	ldr	r2, [pc, #272]	; (8000cc0 <main+0x560>)
 8000bae:	6812      	ldr	r2, [r2, #0]
 8000bb0:	fb02 f303 	mul.w	r3, r2, r3
 8000bb4:	4a44      	ldr	r2, [pc, #272]	; (8000cc8 <main+0x568>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	08db      	lsrs	r3, r3, #3
 8000bbc:	330a      	adds	r3, #10
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	4b42      	ldr	r3, [pc, #264]	; (8000ccc <main+0x56c>)
 8000bc2:	601a      	str	r2, [r3, #0]
        //          currentMaxSpeed = 12;
                  switch(state){
 8000bc4:	4b46      	ldr	r3, [pc, #280]	; (8000ce0 <main+0x580>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d86d      	bhi.n	8000ca8 <main+0x548>
 8000bcc:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <main+0x474>)
 8000bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd2:	bf00      	nop
 8000bd4:	08000c45 	.word	0x08000c45
 8000bd8:	08000c15 	.word	0x08000c15
 8000bdc:	08000be5 	.word	0x08000be5
 8000be0:	08000c75 	.word	0x08000c75
                    case FS:
                        forward();
 8000be4:	f7ff fc84 	bl	80004f0 <forward>
                        TIM3->EGR |= 0x0001; // UG = 1 -> Generate update
 8000be8:	4b40      	ldr	r3, [pc, #256]	; (8000cec <main+0x58c>)
 8000bea:	695b      	ldr	r3, [r3, #20]
 8000bec:	4a3f      	ldr	r2, [pc, #252]	; (8000cec <main+0x58c>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6153      	str	r3, [r2, #20]
                        TIM3->SR = 0;
 8000bf4:	4b3d      	ldr	r3, [pc, #244]	; (8000cec <main+0x58c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
                        // buzzer
                        TIM4->CCMR2 &= ~(0x00FF);
 8000bfa:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <main+0x554>)
 8000bfc:	69db      	ldr	r3, [r3, #28]
 8000bfe:	4a2d      	ldr	r2, [pc, #180]	; (8000cb4 <main+0x554>)
 8000c00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c04:	61d3      	str	r3, [r2, #28]
                        TIM4->CCMR2 |= 0b0010000; // pin to 1
 8000c06:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <main+0x554>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4a2a      	ldr	r2, [pc, #168]	; (8000cb4 <main+0x554>)
 8000c0c:	f043 0310 	orr.w	r3, r3, #16
 8000c10:	61d3      	str	r3, [r2, #28]
                        break;
 8000c12:	e04a      	b.n	8000caa <main+0x54a>
                    case LS:
                        left();
 8000c14:	f7ff fc92 	bl	800053c <left>
                        TIM3->EGR |= 0x0001; // UG = 1 -> Generate update
 8000c18:	4b34      	ldr	r3, [pc, #208]	; (8000cec <main+0x58c>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	4a33      	ldr	r2, [pc, #204]	; (8000cec <main+0x58c>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6153      	str	r3, [r2, #20]
                        TIM3->SR = 0;
 8000c24:	4b31      	ldr	r3, [pc, #196]	; (8000cec <main+0x58c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
                        // buzzer
                        TIM4->CCMR2 &= ~(0x00FF);
 8000c2a:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <main+0x554>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <main+0x554>)
 8000c30:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c34:	61d3      	str	r3, [r2, #28]
                        TIM4->CCMR2 |= 0b0100000; // pin to 0
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <main+0x554>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <main+0x554>)
 8000c3c:	f043 0320 	orr.w	r3, r3, #32
 8000c40:	61d3      	str	r3, [r2, #28]
                        break;
 8000c42:	e032      	b.n	8000caa <main+0x54a>
                    case RS:
                        right();
 8000c44:	f7ff fc9e 	bl	8000584 <right>
                        TIM3->EGR |= 0x0001; // UG = 1 -> Generate update
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <main+0x58c>)
 8000c4a:	695b      	ldr	r3, [r3, #20]
 8000c4c:	4a27      	ldr	r2, [pc, #156]	; (8000cec <main+0x58c>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6153      	str	r3, [r2, #20]
                        TIM3->SR = 0;
 8000c54:	4b25      	ldr	r3, [pc, #148]	; (8000cec <main+0x58c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
                        // buzzer
                        TIM4->CCMR2 &= ~(0x00FF);
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <main+0x554>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4a15      	ldr	r2, [pc, #84]	; (8000cb4 <main+0x554>)
 8000c60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c64:	61d3      	str	r3, [r2, #28]
                        TIM4->CCMR2 |= 0b0100000; // pin to 0
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <main+0x554>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <main+0x554>)
 8000c6c:	f043 0320 	orr.w	r3, r3, #32
 8000c70:	61d3      	str	r3, [r2, #28]
                        break;
 8000c72:	e01a      	b.n	8000caa <main+0x54a>
                    case SS:
                        stop();
 8000c74:	f7ff fcac 	bl	80005d0 <stop>
                        TIM3->EGR |= 0x0001; // UG = 1 -> Generate update
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <main+0x58c>)
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	4a1b      	ldr	r2, [pc, #108]	; (8000cec <main+0x58c>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6153      	str	r3, [r2, #20]
                        TIM3->SR = 0;
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <main+0x58c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
                        // buzzer
                        TIM4->CCMR2 &= ~(0x00FF);
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <main+0x554>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a09      	ldr	r2, [pc, #36]	; (8000cb4 <main+0x554>)
 8000c90:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000c94:	61d3      	str	r3, [r2, #28]
                        TIM4->CCMR2 |= 0b0110000; // toggle
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <main+0x554>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <main+0x554>)
 8000c9c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000ca0:	61d3      	str	r3, [r2, #28]
        //                EXTI->PR = 1; /// Reset EXTI flag
                        breakFlag = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
                        break;
 8000ca6:	e000      	b.n	8000caa <main+0x54a>
                    default:
                      break;
 8000ca8:	bf00      	nop
        while(breakFlag)
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f47f af52 	bne.w	8000b56 <main+0x3f6>
    if(command[0] != prevcommand[0]){
 8000cb2:	e68d      	b.n	80009d0 <main+0x270>
 8000cb4:	40000800 	.word	0x40000800
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	2000000c 	.word	0x2000000c
 8000cc0:	20000010 	.word	0x20000010
 8000cc4:	40012400 	.word	0x40012400
 8000cc8:	cccccccd 	.word	0xcccccccd
 8000ccc:	20000004 	.word	0x20000004
 8000cd0:	08003eb0 	.word	0x08003eb0
 8000cd4:	20000110 	.word	0x20000110
 8000cd8:	000a392f 	.word	0x000a392f
 8000cdc:	08003ebc 	.word	0x08003ebc
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	20000001 	.word	0x20000001
 8000ce8:	20000158 	.word	0x20000158
 8000cec:	40000400 	.word	0x40000400

08000cf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b092      	sub	sp, #72	; 0x48
 8000cf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	2234      	movs	r2, #52	; 0x34
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 f886 	bl	8003e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <SystemClock_Config+0x98>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000d1a:	4a1b      	ldr	r2, [pc, #108]	; (8000d88 <SystemClock_Config+0x98>)
 8000d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d20:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d22:	2302      	movs	r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d26:	2301      	movs	r3, #1
 8000d28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d2a:	2310      	movs	r3, #16
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d32:	2300      	movs	r3, #0
 8000d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000d3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000d40:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4618      	mov	r0, r3
 8000d48:	f001 f934 	bl	8001fb4 <HAL_RCC_OscConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d52:	f000 f9cd 	bl	80010f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d56:	230f      	movs	r3, #15
 8000d58:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fc50 	bl	8002614 <HAL_RCC_ClockConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d7a:	f000 f9b9 	bl	80010f0 <Error_Handler>
  }
}
 8000d7e:	bf00      	nop
 8000d80:	3748      	adds	r7, #72	; 0x48
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40007000 	.word	0x40007000

08000d8c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000d9c:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <MX_ADC_Init+0xac>)
 8000d9e:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <MX_ADC_Init+0xb0>)
 8000da0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000da2:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <MX_ADC_Init+0xac>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <MX_ADC_Init+0xac>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dae:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <MX_ADC_Init+0xac>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000db4:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <MX_ADC_Init+0xac>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dba:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_ADC_Init+0xac>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_ADC_Init+0xac>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_ADC_Init+0xac>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_ADC_Init+0xac>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_ADC_Init+0xac>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <MX_ADC_Init+0xac>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000de0:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_ADC_Init+0xac>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC3;
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <MX_ADC_Init+0xac>)
 8000dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000dee:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <MX_ADC_Init+0xac>)
 8000df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000df6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000df8:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <MX_ADC_Init+0xac>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e00:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_ADC_Init+0xac>)
 8000e02:	f000 fb35 	bl	8001470 <HAL_ADC_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000e0c:	f000 f970 	bl	80010f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e10:	2304      	movs	r3, #4
 8000e12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_ADC_Init+0xac>)
 8000e22:	f000 fc6b 	bl	80016fc <HAL_ADC_ConfigChannel>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000e2c:	f000 f960 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000003c 	.word	0x2000003c
 8000e3c:	40012400 	.word	0x40012400

08000e40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e54:	463b      	mov	r3, r7
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <MX_TIM3_Init+0x98>)
 8000e60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e82:	4814      	ldr	r0, [pc, #80]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000e84:	f001 fe8c 	bl	8002ba0 <HAL_TIM_Base_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000e8e:	f000 f92f 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e98:	f107 0308 	add.w	r3, r7, #8
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000ea0:	f001 febd 	bl	8002c1e <HAL_TIM_ConfigClockSource>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000eaa:	f000 f921 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <MX_TIM3_Init+0x94>)
 8000ebc:	f002 f87c 	bl	8002fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000ec6:	f000 f913 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000090 	.word	0x20000090
 8000ed8:	40000400 	.word	0x40000400

08000edc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_TIM4_Init+0x94>)
 8000efa:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <MX_TIM4_Init+0x98>)
 8000efc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <MX_TIM4_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <MX_TIM4_Init+0x94>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_TIM4_Init+0x94>)
 8000f0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f10:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <MX_TIM4_Init+0x94>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_TIM4_Init+0x94>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f1e:	4814      	ldr	r0, [pc, #80]	; (8000f70 <MX_TIM4_Init+0x94>)
 8000f20:	f001 fe3e 	bl	8002ba0 <HAL_TIM_Base_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000f2a:	f000 f8e1 	bl	80010f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <MX_TIM4_Init+0x94>)
 8000f3c:	f001 fe6f 	bl	8002c1e <HAL_TIM_ConfigClockSource>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000f46:	f000 f8d3 	bl	80010f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <MX_TIM4_Init+0x94>)
 8000f58:	f002 f82e 	bl	8002fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000f62:	f000 f8c5 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200000d0 	.word	0x200000d0
 8000f74:	40000800 	.word	0x40000800

08000f78 <MX_TS_Init>:
  * @brief TS Initialization Function
  * @param None
  * @retval None
  */
static void MX_TS_Init(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE END TS_Init 1 */
  /* USER CODE BEGIN TS_Init 2 */

  /* USER CODE END TS_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <MX_USART1_UART_Init+0x50>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_USART1_UART_Init+0x4c>)
 8000fbc:	f002 f85a 	bl	8003074 <HAL_UART_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fc6:	f000 f893 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000110 	.word	0x20000110
 8000fd4:	40013800 	.word	0x40013800

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <MX_GPIO_Init+0xe8>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a33      	ldr	r2, [pc, #204]	; (80010c0 <MX_GPIO_Init+0xe8>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <MX_GPIO_Init+0xe8>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	4b2e      	ldr	r3, [pc, #184]	; (80010c0 <MX_GPIO_Init+0xe8>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a2d      	ldr	r2, [pc, #180]	; (80010c0 <MX_GPIO_Init+0xe8>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <MX_GPIO_Init+0xe8>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <MX_GPIO_Init+0xe8>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <MX_GPIO_Init+0xe8>)
 8001024:	f043 0302 	orr.w	r3, r3, #2
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <MX_GPIO_Init+0xe8>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 0302 	and.w	r3, r3, #2
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : SEG14_Pin SEG15_Pin SEG16_Pin SEG17_Pin
                           SEG18_Pin SEG19_Pin SEG20_Pin SEG21_Pin
                           SEG22_Pin SEG23_Pin */
  GPIO_InitStruct.Pin = SEG14_Pin|SEG15_Pin|SEG16_Pin|SEG17_Pin
 8001036:	f640 73cf 	movw	r3, #4047	; 0xfcf
 800103a:	60fb      	str	r3, [r7, #12]
                          |SEG18_Pin|SEG19_Pin|SEG20_Pin|SEG21_Pin
                          |SEG22_Pin|SEG23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001048:	230b      	movs	r3, #11
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4619      	mov	r1, r3
 8001052:	481c      	ldr	r0, [pc, #112]	; (80010c4 <MX_GPIO_Init+0xec>)
 8001054:	f000 fe2e 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001058:	2301      	movs	r3, #1
 800105a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800105c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4619      	mov	r1, r3
 800106c:	4816      	ldr	r0, [pc, #88]	; (80010c8 <MX_GPIO_Init+0xf0>)
 800106e:	f000 fe21 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin COM0_Pin
                           COM1_Pin COM2_Pin SEG12_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|COM0_Pin
 8001072:	f248 730e 	movw	r3, #34574	; 0x870e
 8001076:	60fb      	str	r3, [r7, #12]
                          |COM1_Pin|COM2_Pin|SEG12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8001084:	230b      	movs	r3, #11
 8001086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4619      	mov	r1, r3
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <MX_GPIO_Init+0xf0>)
 8001090:	f000 fe10 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG6_Pin SEG7_Pin SEG8_Pin SEG9_Pin
                           SEG10_Pin SEG11_Pin SEG3_Pin SEG4_Pin
                           SEG5_Pin SEG13_Pin COM3_Pin */
  GPIO_InitStruct.Pin = SEG6_Pin|SEG7_Pin|SEG8_Pin|SEG9_Pin
 8001094:	f64f 7338 	movw	r3, #65336	; 0xff38
 8001098:	60fb      	str	r3, [r7, #12]
                          |SEG10_Pin|SEG11_Pin|SEG3_Pin|SEG4_Pin
                          |SEG5_Pin|SEG13_Pin|COM3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 80010a6:	230b      	movs	r3, #11
 80010a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	4619      	mov	r1, r3
 80010b0:	4806      	ldr	r0, [pc, #24]	; (80010cc <MX_GPIO_Init+0xf4>)
 80010b2:	f000 fdff 	bl	8001cb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b6:	bf00      	nop
 80010b8:	3720      	adds	r7, #32
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400

080010d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(huart , command, 1); // Vuelve a activar Rx por haber acabado el buffer
 80010d8:	2201      	movs	r2, #1
 80010da:	4904      	ldr	r1, [pc, #16]	; (80010ec <HAL_UART_RxCpltCallback+0x1c>)
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f002 f89c 	bl	800321a <HAL_UART_Receive_IT>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>
	...

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_MspInit+0x5c>)
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	4a14      	ldr	r2, [pc, #80]	; (8001158 <HAL_MspInit+0x5c>)
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800110c:	6253      	str	r3, [r2, #36]	; 0x24
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <HAL_MspInit+0x5c>)
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_MspInit+0x5c>)
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <HAL_MspInit+0x5c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6213      	str	r3, [r2, #32]
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_MspInit+0x5c>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_MspInit+0x5c>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	4a08      	ldr	r2, [pc, #32]	; (8001158 <HAL_MspInit+0x5c>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	6253      	str	r3, [r2, #36]	; 0x24
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_MspInit+0x5c>)
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800114a:	2007      	movs	r0, #7
 800114c:	f000 fcf2 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40023800 	.word	0x40023800

0800115c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <HAL_ADC_MspInit+0x74>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d123      	bne.n	80011c6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_ADC_MspInit+0x78>)
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <HAL_ADC_MspInit+0x78>)
 8001184:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001188:	6213      	str	r3, [r2, #32]
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_ADC_MspInit+0x78>)
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_ADC_MspInit+0x78>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_ADC_MspInit+0x78>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_ADC_MspInit+0x78>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = IDD_Measurement_Pin;
 80011ae:	2310      	movs	r3, #16
 80011b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b2:	2303      	movs	r3, #3
 80011b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IDD_Measurement_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_ADC_MspInit+0x7c>)
 80011c2:	f000 fd77 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40012400 	.word	0x40012400
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000

080011dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <HAL_TIM_Base_MspInit+0x58>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d10c      	bne.n	8001208 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_TIM_Base_MspInit+0x5c>)
 80011f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f2:	4a11      	ldr	r2, [pc, #68]	; (8001238 <HAL_TIM_Base_MspInit+0x5c>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6253      	str	r3, [r2, #36]	; 0x24
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_TIM_Base_MspInit+0x5c>)
 80011fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001206:	e010      	b.n	800122a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0b      	ldr	r2, [pc, #44]	; (800123c <HAL_TIM_Base_MspInit+0x60>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d10b      	bne.n	800122a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_TIM_Base_MspInit+0x5c>)
 8001214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001216:	4a08      	ldr	r2, [pc, #32]	; (8001238 <HAL_TIM_Base_MspInit+0x5c>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6253      	str	r3, [r2, #36]	; 0x24
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_TIM_Base_MspInit+0x5c>)
 8001220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40000400 	.word	0x40000400
 8001238:	40023800 	.word	0x40023800
 800123c:	40000800 	.word	0x40000800

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <HAL_UART_MspInit+0x8c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d12f      	bne.n	80012c2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_UART_MspInit+0x90>)
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <HAL_UART_MspInit+0x90>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6213      	str	r3, [r2, #32]
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_UART_MspInit+0x90>)
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_UART_MspInit+0x90>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <HAL_UART_MspInit+0x90>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_UART_MspInit+0x90>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001292:	23c0      	movs	r3, #192	; 0xc0
 8001294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a2:	2307      	movs	r3, #7
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	4809      	ldr	r0, [pc, #36]	; (80012d4 <HAL_UART_MspInit+0x94>)
 80012ae:	f000 fd01 	bl	8001cb4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2025      	movs	r0, #37	; 0x25
 80012b8:	f000 fc47 	bl	8001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012bc:	2025      	movs	r0, #37	; 0x25
 80012be:	f000 fc60 	bl	8001b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40013800 	.word	0x40013800
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020400 	.word	0x40020400

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131e:	f000 f88b 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800132c:	4802      	ldr	r0, [pc, #8]	; (8001338 <USART1_IRQHandler+0x10>)
 800132e:	f001 ff99 	bl	8003264 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000110 	.word	0x20000110

0800133c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001348:	f7ff fff8 	bl	800133c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800134c:	480b      	ldr	r0, [pc, #44]	; (800137c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800134e:	490c      	ldr	r1, [pc, #48]	; (8001380 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001350:	4a0c      	ldr	r2, [pc, #48]	; (8001384 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001354:	e002      	b.n	800135c <LoopCopyDataInit>

08001356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135a:	3304      	adds	r3, #4

0800135c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800135c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001360:	d3f9      	bcc.n	8001356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001364:	4c09      	ldr	r4, [pc, #36]	; (800138c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001368:	e001      	b.n	800136e <LoopFillZerobss>

0800136a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800136c:	3204      	adds	r2, #4

0800136e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001370:	d3fb      	bcc.n	800136a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001372:	f002 fd55 	bl	8003e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001376:	f7ff f9f3 	bl	8000760 <main>
  bx lr
 800137a:	4770      	bx	lr
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001384:	08003efc 	.word	0x08003efc
  ldr r2, =_sbss
 8001388:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800138c:	20000160 	.word	0x20000160

08001390 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_IRQHandler>

08001392 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001398:	2300      	movs	r3, #0
 800139a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f000 fbc9 	bl	8001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a2:	2000      	movs	r0, #0
 80013a4:	f000 f80e 	bl	80013c4 <HAL_InitTick>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d002      	beq.n	80013b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	e001      	b.n	80013b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013b4:	f7ff fea2 	bl	80010fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013b8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013cc:	2300      	movs	r3, #0
 80013ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_InitTick+0x68>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d022      	beq.n	800141e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_InitTick+0x6c>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_InitTick+0x68>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80013e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fbd6 	bl	8001b9e <HAL_SYSTICK_Config>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d10f      	bne.n	8001418 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b0f      	cmp	r3, #15
 80013fc:	d809      	bhi.n	8001412 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fe:	2200      	movs	r2, #0
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	f04f 30ff 	mov.w	r0, #4294967295
 8001406:	f000 fba0 	bl	8001b4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <HAL_InitTick+0x70>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	e007      	b.n	8001422 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	e004      	b.n	8001422 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e001      	b.n	8001422 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000001c 	.word	0x2000001c
 8001430:	20000014 	.word	0x20000014
 8001434:	20000018 	.word	0x20000018

08001438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_IncTick+0x1c>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_IncTick+0x20>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4413      	add	r3, r2
 8001446:	4a03      	ldr	r2, [pc, #12]	; (8001454 <HAL_IncTick+0x1c>)
 8001448:	6013      	str	r3, [r2, #0]
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	2000015c 	.word	0x2000015c
 8001458:	2000001c 	.word	0x2000001c

0800145c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b02      	ldr	r3, [pc, #8]	; (800146c <HAL_GetTick+0x10>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	2000015c 	.word	0x2000015c

08001470 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08e      	sub	sp, #56	; 0x38
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e127      	b.n	80016e0 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	2b00      	cmp	r3, #0
 800149c:	d115      	bne.n	80014ca <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ac:	4b8e      	ldr	r3, [pc, #568]	; (80016e8 <HAL_ADC_Init+0x278>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a8d      	ldr	r2, [pc, #564]	; (80016e8 <HAL_ADC_Init+0x278>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	4b8b      	ldr	r3, [pc, #556]	; (80016e8 <HAL_ADC_Init+0x278>)
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff fe49 	bl	800115c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f003 0310 	and.w	r3, r3, #16
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f040 80ff 	bne.w	80016d6 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014e0:	f023 0302 	bic.w	r3, r3, #2
 80014e4:	f043 0202 	orr.w	r2, r3, #2
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80014ec:	4b7f      	ldr	r3, [pc, #508]	; (80016ec <HAL_ADC_Init+0x27c>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	497c      	ldr	r1, [pc, #496]	; (80016ec <HAL_ADC_Init+0x27c>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001506:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800150e:	4619      	mov	r1, r3
 8001510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001514:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	fa93 f3a3 	rbit	r3, r3
 800151c:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fab3 f383 	clz	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 800152a:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001530:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	2302      	movs	r3, #2
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	fa93 f3a3 	rbit	r3, r3
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	fab3 f383 	clz	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8001552:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8001554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001556:	4313      	orrs	r3, r2
 8001558:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800155e:	2b10      	cmp	r3, #16
 8001560:	d007      	beq.n	8001572 <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800156a:	4313      	orrs	r3, r2
 800156c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800156e:	4313      	orrs	r3, r2
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800157c:	2b40      	cmp	r3, #64	; 0x40
 800157e:	d04f      	beq.n	8001620 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001586:	4313      	orrs	r3, r2
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001592:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6912      	ldr	r2, [r2, #16]
 8001598:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800159c:	d003      	beq.n	80015a6 <HAL_ADC_Init+0x136>
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6912      	ldr	r2, [r2, #16]
 80015a2:	2a01      	cmp	r2, #1
 80015a4:	d102      	bne.n	80015ac <HAL_ADC_Init+0x13c>
 80015a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015aa:	e000      	b.n	80015ae <HAL_ADC_Init+0x13e>
 80015ac:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 80015ae:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80015b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015b2:	4313      	orrs	r3, r2
 80015b4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d125      	bne.n	800160c <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d114      	bne.n	80015f4 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80015d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	fa92 f2a2 	rbit	r2, r2
 80015dc:	617a      	str	r2, [r7, #20]
  return result;
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	fab2 f282 	clz	r2, r2
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	4093      	lsls	r3, r2
 80015e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015ee:	4313      	orrs	r3, r2
 80015f0:	633b      	str	r3, [r7, #48]	; 0x30
 80015f2:	e00b      	b.n	800160c <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f8:	f043 0220 	orr.w	r2, r3, #32
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001604:	f043 0201 	orr.w	r2, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4b37      	ldr	r3, [pc, #220]	; (80016f0 <HAL_ADC_Init+0x280>)
 8001614:	4013      	ands	r3, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800161c:	430b      	orrs	r3, r1
 800161e:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	4b33      	ldr	r3, [pc, #204]	; (80016f4 <HAL_ADC_Init+0x284>)
 8001628:	4013      	ands	r3, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001630:	430b      	orrs	r3, r1
 8001632:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800163c:	d003      	beq.n	8001646 <HAL_ADC_Init+0x1d6>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d119      	bne.n	800167a <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	3b01      	subs	r3, #1
 8001656:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 800165a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	fa92 f2a2 	rbit	r2, r2
 8001662:	60fa      	str	r2, [r7, #12]
  return result;
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	fab2 f282 	clz	r2, r2
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	fa03 f202 	lsl.w	r2, r3, r2
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
 8001678:	e007      	b.n	800168a <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001688:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_ADC_Init+0x288>)
 8001692:	4013      	ands	r3, r2
 8001694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001696:	429a      	cmp	r2, r3
 8001698:	d10b      	bne.n	80016b2 <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a4:	f023 0303 	bic.w	r3, r3, #3
 80016a8:	f043 0201 	orr.w	r2, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80016b0:	e014      	b.n	80016dc <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	f023 0312 	bic.w	r3, r3, #18
 80016ba:	f043 0210 	orr.w	r2, r3, #16
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016c6:	f043 0201 	orr.w	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80016d4:	e002      	b.n	80016dc <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3738      	adds	r7, #56	; 0x38
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40012700 	.word	0x40012700
 80016f0:	fcfc16ff 	.word	0xfcfc16ff
 80016f4:	c0fff189 	.word	0xc0fff189
 80016f8:	bf80fffe 	.word	0xbf80fffe

080016fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_ADC_ConfigChannel+0x20>
 8001718:	2302      	movs	r3, #2
 800171a:	e134      	b.n	8001986 <HAL_ADC_ConfigChannel+0x28a>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b06      	cmp	r3, #6
 800172a:	d81c      	bhi.n	8001766 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3b05      	subs	r3, #5
 800173e:	221f      	movs	r2, #31
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	4019      	ands	r1, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	6818      	ldr	r0, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4413      	add	r3, r2
 8001756:	3b05      	subs	r3, #5
 8001758:	fa00 f203 	lsl.w	r2, r0, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	641a      	str	r2, [r3, #64]	; 0x40
 8001764:	e07e      	b.n	8001864 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d81c      	bhi.n	80017a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	3b23      	subs	r3, #35	; 0x23
 8001780:	221f      	movs	r2, #31
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	4019      	ands	r1, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6818      	ldr	r0, [r3, #0]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	3b23      	subs	r3, #35	; 0x23
 800179a:	fa00 f203 	lsl.w	r2, r0, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80017a6:	e05d      	b.n	8001864 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b12      	cmp	r3, #18
 80017ae:	d81c      	bhi.n	80017ea <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	3b41      	subs	r3, #65	; 0x41
 80017c2:	221f      	movs	r2, #31
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4019      	ands	r1, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6818      	ldr	r0, [r3, #0]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4613      	mov	r3, r2
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	3b41      	subs	r3, #65	; 0x41
 80017dc:	fa00 f203 	lsl.w	r2, r0, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	639a      	str	r2, [r3, #56]	; 0x38
 80017e8:	e03c      	b.n	8001864 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b18      	cmp	r3, #24
 80017f0:	d81c      	bhi.n	800182c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	3b5f      	subs	r3, #95	; 0x5f
 8001804:	221f      	movs	r2, #31
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	4019      	ands	r1, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	3b5f      	subs	r3, #95	; 0x5f
 800181e:	fa00 f203 	lsl.w	r2, r0, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	635a      	str	r2, [r3, #52]	; 0x34
 800182a:	e01b      	b.n	8001864 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	3b7d      	subs	r3, #125	; 0x7d
 800183e:	221f      	movs	r2, #31
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	4019      	ands	r1, r3
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	3b7d      	subs	r3, #125	; 0x7d
 8001858:	fa00 f203 	lsl.w	r2, r0, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b09      	cmp	r3, #9
 800186a:	d81a      	bhi.n	80018a2 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6959      	ldr	r1, [r3, #20]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4613      	mov	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	4413      	add	r3, r2
 800187c:	2207      	movs	r2, #7
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43db      	mvns	r3, r3
 8001884:	4019      	ands	r1, r3
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	6898      	ldr	r0, [r3, #8]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	fa00 f203 	lsl.w	r2, r0, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	615a      	str	r2, [r3, #20]
 80018a0:	e042      	b.n	8001928 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b13      	cmp	r3, #19
 80018a8:	d81c      	bhi.n	80018e4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6919      	ldr	r1, [r3, #16]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	3b1e      	subs	r3, #30
 80018bc:	2207      	movs	r2, #7
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	4019      	ands	r1, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	6898      	ldr	r0, [r3, #8]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	3b1e      	subs	r3, #30
 80018d6:	fa00 f203 	lsl.w	r2, r0, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	611a      	str	r2, [r3, #16]
 80018e2:	e021      	b.n	8001928 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b1a      	cmp	r3, #26
 80018ea:	d81c      	bhi.n	8001926 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68d9      	ldr	r1, [r3, #12]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	3b3c      	subs	r3, #60	; 0x3c
 80018fe:	2207      	movs	r2, #7
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	4019      	ands	r1, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	6898      	ldr	r0, [r3, #8]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	3b3c      	subs	r3, #60	; 0x3c
 8001918:	fa00 f203 	lsl.w	r2, r0, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	e000      	b.n	8001928 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001926:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b10      	cmp	r3, #16
 800192e:	d003      	beq.n	8001938 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001934:	2b11      	cmp	r3, #17
 8001936:	d121      	bne.n	800197c <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <HAL_ADC_ConfigChannel+0x294>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d11b      	bne.n	800197c <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_ADC_ConfigChannel+0x294>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_ADC_ConfigChannel+0x294>)
 800194a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800194e:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b10      	cmp	r3, #16
 8001956:	d111      	bne.n	800197c <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <HAL_ADC_ConfigChannel+0x298>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <HAL_ADC_ConfigChannel+0x29c>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0c9a      	lsrs	r2, r3, #18
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800196e:	e002      	b.n	8001976 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	3b01      	subs	r3, #1
 8001974:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f9      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	40012700 	.word	0x40012700
 8001994:	20000014 	.word	0x20000014
 8001998:	431bde83 	.word	0x431bde83

0800199c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b8:	4013      	ands	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <__NVIC_SetPriorityGrouping+0x44>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <__NVIC_GetPriorityGrouping+0x18>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	f003 0307 	and.w	r3, r3, #7
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	db0b      	blt.n	8001a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f003 021f 	and.w	r2, r3, #31
 8001a18:	4906      	ldr	r1, [pc, #24]	; (8001a34 <__NVIC_EnableIRQ+0x34>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	2001      	movs	r0, #1
 8001a22:	fa00 f202 	lsl.w	r2, r0, r2
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr

08001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b00:	d301      	bcc.n	8001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b02:	2301      	movs	r3, #1
 8001b04:	e00f      	b.n	8001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b06:	4a0a      	ldr	r2, [pc, #40]	; (8001b30 <SysTick_Config+0x40>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b0e:	210f      	movs	r1, #15
 8001b10:	f04f 30ff 	mov.w	r0, #4294967295
 8001b14:	f7ff ff90 	bl	8001a38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <SysTick_Config+0x40>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <SysTick_Config+0x40>)
 8001b20:	2207      	movs	r2, #7
 8001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	e000e010 	.word	0xe000e010

08001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff ff2d 	bl	800199c <__NVIC_SetPriorityGrouping>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	4603      	mov	r3, r0
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b5c:	f7ff ff42 	bl	80019e4 <__NVIC_GetPriorityGrouping>
 8001b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	6978      	ldr	r0, [r7, #20]
 8001b68:	f7ff ff90 	bl	8001a8c <NVIC_EncodePriority>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b72:	4611      	mov	r1, r2
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff ff5f 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b7a:	bf00      	nop
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff35 	bl	8001a00 <__NVIC_EnableIRQ>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff ffa2 	bl	8001af0 <SysTick_Config>
 8001bac:	4603      	mov	r3, r0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b085      	sub	sp, #20
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d008      	beq.n	8001be0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e022      	b.n	8001c26 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 020e 	bic.w	r2, r2, #14
 8001bee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f003 021c 	and.w	r2, r3, #28
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c12:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d005      	beq.n	8001c54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	e029      	b.n	8001ca8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 020e 	bic.w	r2, r2, #14
 8001c62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c78:	f003 021c 	and.w	r2, r3, #28
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c80:	2101      	movs	r1, #1
 8001c82:	fa01 f202 	lsl.w	r2, r1, r2
 8001c86:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	4798      	blx	r3
    }
  }
  return status;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b087      	sub	sp, #28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cca:	e154      	b.n	8001f76 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	f000 8146 	beq.w	8001f70 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d005      	beq.n	8001cfc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d130      	bne.n	8001d5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001d32:	2201      	movs	r2, #1
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	f003 0201 	and.w	r2, r3, #1
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d017      	beq.n	8001d9a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	2203      	movs	r2, #3
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d123      	bne.n	8001dee <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	08da      	lsrs	r2, r3, #3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3208      	adds	r2, #8
 8001de8:	6939      	ldr	r1, [r7, #16]
 8001dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0203 	and.w	r2, r3, #3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80a0 	beq.w	8001f70 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e30:	4b58      	ldr	r3, [pc, #352]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4a57      	ldr	r2, [pc, #348]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	4b55      	ldr	r3, [pc, #340]	; (8001f94 <HAL_GPIO_Init+0x2e0>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e48:	4a53      	ldr	r2, [pc, #332]	; (8001f98 <HAL_GPIO_Init+0x2e4>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a4b      	ldr	r2, [pc, #300]	; (8001f9c <HAL_GPIO_Init+0x2e8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d019      	beq.n	8001ea8 <HAL_GPIO_Init+0x1f4>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a4a      	ldr	r2, [pc, #296]	; (8001fa0 <HAL_GPIO_Init+0x2ec>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d013      	beq.n	8001ea4 <HAL_GPIO_Init+0x1f0>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a49      	ldr	r2, [pc, #292]	; (8001fa4 <HAL_GPIO_Init+0x2f0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00d      	beq.n	8001ea0 <HAL_GPIO_Init+0x1ec>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	4a48      	ldr	r2, [pc, #288]	; (8001fa8 <HAL_GPIO_Init+0x2f4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d007      	beq.n	8001e9c <HAL_GPIO_Init+0x1e8>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a47      	ldr	r2, [pc, #284]	; (8001fac <HAL_GPIO_Init+0x2f8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d101      	bne.n	8001e98 <HAL_GPIO_Init+0x1e4>
 8001e94:	2304      	movs	r3, #4
 8001e96:	e008      	b.n	8001eaa <HAL_GPIO_Init+0x1f6>
 8001e98:	2305      	movs	r3, #5
 8001e9a:	e006      	b.n	8001eaa <HAL_GPIO_Init+0x1f6>
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e004      	b.n	8001eaa <HAL_GPIO_Init+0x1f6>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e002      	b.n	8001eaa <HAL_GPIO_Init+0x1f6>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <HAL_GPIO_Init+0x1f6>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	f002 0203 	and.w	r2, r2, #3
 8001eb0:	0092      	lsls	r2, r2, #2
 8001eb2:	4093      	lsls	r3, r2
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001eba:	4937      	ldr	r1, [pc, #220]	; (8001f98 <HAL_GPIO_Init+0x2e4>)
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ec8:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <HAL_GPIO_Init+0x2fc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001eec:	4a30      	ldr	r2, [pc, #192]	; (8001fb0 <HAL_GPIO_Init+0x2fc>)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ef2:	4b2f      	ldr	r3, [pc, #188]	; (8001fb0 <HAL_GPIO_Init+0x2fc>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4013      	ands	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f16:	4a26      	ldr	r2, [pc, #152]	; (8001fb0 <HAL_GPIO_Init+0x2fc>)
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f1c:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <HAL_GPIO_Init+0x2fc>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <HAL_GPIO_Init+0x2fc>)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_GPIO_Init+0x2fc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f6a:	4a11      	ldr	r2, [pc, #68]	; (8001fb0 <HAL_GPIO_Init+0x2fc>)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	3301      	adds	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f47f aea3 	bne.w	8001ccc <HAL_GPIO_Init+0x18>
  }
}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	40020000 	.word	0x40020000
 8001fa0:	40020400 	.word	0x40020400
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010400 	.word	0x40010400

08001fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e31d      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc6:	4b94      	ldr	r3, [pc, #592]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd0:	4b91      	ldr	r3, [pc, #580]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d07b      	beq.n	80020de <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d006      	beq.n	8001ffa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d10f      	bne.n	8002012 <HAL_RCC_OscConfig+0x5e>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	d10b      	bne.n	8002012 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ffa:	4b87      	ldr	r3, [pc, #540]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d06a      	beq.n	80020dc <HAL_RCC_OscConfig+0x128>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d166      	bne.n	80020dc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e2f7      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d106      	bne.n	8002028 <HAL_RCC_OscConfig+0x74>
 800201a:	4b7f      	ldr	r3, [pc, #508]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a7e      	ldr	r2, [pc, #504]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e02d      	b.n	8002084 <HAL_RCC_OscConfig+0xd0>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10c      	bne.n	800204a <HAL_RCC_OscConfig+0x96>
 8002030:	4b79      	ldr	r3, [pc, #484]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a78      	ldr	r2, [pc, #480]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b76      	ldr	r3, [pc, #472]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a75      	ldr	r2, [pc, #468]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e01c      	b.n	8002084 <HAL_RCC_OscConfig+0xd0>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b05      	cmp	r3, #5
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0xb8>
 8002052:	4b71      	ldr	r3, [pc, #452]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a70      	ldr	r2, [pc, #448]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b6e      	ldr	r3, [pc, #440]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6d      	ldr	r2, [pc, #436]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e00b      	b.n	8002084 <HAL_RCC_OscConfig+0xd0>
 800206c:	4b6a      	ldr	r3, [pc, #424]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a69      	ldr	r2, [pc, #420]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	4b67      	ldr	r3, [pc, #412]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a66      	ldr	r2, [pc, #408]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 800207e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d013      	beq.n	80020b4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff f9e6 	bl	800145c <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002094:	f7ff f9e2 	bl	800145c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e2ad      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020a6:	4b5c      	ldr	r3, [pc, #368]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0xe0>
 80020b2:	e014      	b.n	80020de <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff f9d2 	bl	800145c <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020bc:	f7ff f9ce 	bl	800145c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	; 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e299      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020ce:	4b52      	ldr	r3, [pc, #328]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x108>
 80020da:	e000      	b.n	80020de <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d05a      	beq.n	80021a0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d119      	bne.n	800212a <HAL_RCC_OscConfig+0x176>
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d116      	bne.n	800212a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fc:	4b46      	ldr	r3, [pc, #280]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_OscConfig+0x160>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d001      	beq.n	8002114 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e276      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	4b40      	ldr	r3, [pc, #256]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	021b      	lsls	r3, r3, #8
 8002122:	493d      	ldr	r1, [pc, #244]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002124:	4313      	orrs	r3, r2
 8002126:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002128:	e03a      	b.n	80021a0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d020      	beq.n	8002174 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002132:	4b3a      	ldr	r3, [pc, #232]	; (800221c <HAL_RCC_OscConfig+0x268>)
 8002134:	2201      	movs	r2, #1
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff f990 	bl	800145c <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002140:	f7ff f98c 	bl	800145c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e257      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215e:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	492a      	ldr	r1, [pc, #168]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
 8002172:	e015      	b.n	80021a0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002174:	4b29      	ldr	r3, [pc, #164]	; (800221c <HAL_RCC_OscConfig+0x268>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff f96f 	bl	800145c <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002182:	f7ff f96b 	bl	800145c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e236      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002194:	4b20      	ldr	r3, [pc, #128]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f0      	bne.n	8002182 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80b8 	beq.w	800231e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d170      	bne.n	8002296 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_OscConfig+0x218>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e21a      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a1a      	ldr	r2, [r3, #32]
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80021d8:	429a      	cmp	r2, r3
 80021da:	d921      	bls.n	8002220 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fc7d 	bl	8002ae0 <RCC_SetFlashLatencyFromMSIRange>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e208      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4906      	ldr	r1, [pc, #24]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	061b      	lsls	r3, r3, #24
 8002210:	4901      	ldr	r1, [pc, #4]	; (8002218 <HAL_RCC_OscConfig+0x264>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
 8002216:	e020      	b.n	800225a <HAL_RCC_OscConfig+0x2a6>
 8002218:	40023800 	.word	0x40023800
 800221c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002220:	4b99      	ldr	r3, [pc, #612]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4996      	ldr	r1, [pc, #600]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002232:	4b95      	ldr	r3, [pc, #596]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	061b      	lsls	r3, r3, #24
 8002240:	4991      	ldr	r1, [pc, #580]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a1b      	ldr	r3, [r3, #32]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fc48 	bl	8002ae0 <RCC_SetFlashLatencyFromMSIRange>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e1d3      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	0b5b      	lsrs	r3, r3, #13
 8002260:	3301      	adds	r3, #1
 8002262:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800226a:	4a87      	ldr	r2, [pc, #540]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 800226c:	6892      	ldr	r2, [r2, #8]
 800226e:	0912      	lsrs	r2, r2, #4
 8002270:	f002 020f 	and.w	r2, r2, #15
 8002274:	4985      	ldr	r1, [pc, #532]	; (800248c <HAL_RCC_OscConfig+0x4d8>)
 8002276:	5c8a      	ldrb	r2, [r1, r2]
 8002278:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800227a:	4a85      	ldr	r2, [pc, #532]	; (8002490 <HAL_RCC_OscConfig+0x4dc>)
 800227c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800227e:	4b85      	ldr	r3, [pc, #532]	; (8002494 <HAL_RCC_OscConfig+0x4e0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff f89e 	bl	80013c4 <HAL_InitTick>
 8002288:	4603      	mov	r3, r0
 800228a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d045      	beq.n	800231e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002292:	7bfb      	ldrb	r3, [r7, #15]
 8002294:	e1b5      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d029      	beq.n	80022f2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800229e:	4b7e      	ldr	r3, [pc, #504]	; (8002498 <HAL_RCC_OscConfig+0x4e4>)
 80022a0:	2201      	movs	r2, #1
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7ff f8da 	bl	800145c <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ac:	f7ff f8d6 	bl	800145c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1a1      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022be:	4b72      	ldr	r3, [pc, #456]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ca:	4b6f      	ldr	r3, [pc, #444]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	496c      	ldr	r1, [pc, #432]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022dc:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	061b      	lsls	r3, r3, #24
 80022ea:	4967      	ldr	r1, [pc, #412]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
 80022f0:	e015      	b.n	800231e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022f2:	4b69      	ldr	r3, [pc, #420]	; (8002498 <HAL_RCC_OscConfig+0x4e4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff f8b0 	bl	800145c <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002300:	f7ff f8ac 	bl	800145c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e177      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002312:	4b5d      	ldr	r3, [pc, #372]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d030      	beq.n	800238c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d016      	beq.n	8002360 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002332:	4b5a      	ldr	r3, [pc, #360]	; (800249c <HAL_RCC_OscConfig+0x4e8>)
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002338:	f7ff f890 	bl	800145c <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002340:	f7ff f88c 	bl	800145c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e157      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002352:	4b4d      	ldr	r3, [pc, #308]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x38c>
 800235e:	e015      	b.n	800238c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002360:	4b4e      	ldr	r3, [pc, #312]	; (800249c <HAL_RCC_OscConfig+0x4e8>)
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002366:	f7ff f879 	bl	800145c <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800236c:	e008      	b.n	8002380 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800236e:	f7ff f875 	bl	800145c <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e140      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002380:	4b41      	ldr	r3, [pc, #260]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1f0      	bne.n	800236e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80b5 	beq.w	8002504 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2300      	movs	r3, #0
 800239c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239e:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10d      	bne.n	80023c6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	4b37      	ldr	r3, [pc, #220]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	4a36      	ldr	r2, [pc, #216]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6253      	str	r3, [r2, #36]	; 0x24
 80023b6:	4b34      	ldr	r3, [pc, #208]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c2:	2301      	movs	r3, #1
 80023c4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c6:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <HAL_RCC_OscConfig+0x4ec>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d118      	bne.n	8002404 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d2:	4b33      	ldr	r3, [pc, #204]	; (80024a0 <HAL_RCC_OscConfig+0x4ec>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a32      	ldr	r2, [pc, #200]	; (80024a0 <HAL_RCC_OscConfig+0x4ec>)
 80023d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023de:	f7ff f83d 	bl	800145c <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e6:	f7ff f839 	bl	800145c <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b64      	cmp	r3, #100	; 0x64
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e104      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <HAL_RCC_OscConfig+0x4ec>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002400:	2b00      	cmp	r3, #0
 8002402:	d0f0      	beq.n	80023e6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d106      	bne.n	800241a <HAL_RCC_OscConfig+0x466>
 800240c:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 800240e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002410:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002416:	6353      	str	r3, [r2, #52]	; 0x34
 8002418:	e02d      	b.n	8002476 <HAL_RCC_OscConfig+0x4c2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x488>
 8002422:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002426:	4a18      	ldr	r2, [pc, #96]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800242c:	6353      	str	r3, [r2, #52]	; 0x34
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002432:	4a15      	ldr	r2, [pc, #84]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002438:	6353      	str	r3, [r2, #52]	; 0x34
 800243a:	e01c      	b.n	8002476 <HAL_RCC_OscConfig+0x4c2>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b05      	cmp	r3, #5
 8002442:	d10c      	bne.n	800245e <HAL_RCC_OscConfig+0x4aa>
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002448:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 800244a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800244e:	6353      	str	r3, [r2, #52]	; 0x34
 8002450:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002454:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245a:	6353      	str	r3, [r2, #52]	; 0x34
 800245c:	e00b      	b.n	8002476 <HAL_RCC_OscConfig+0x4c2>
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002462:	4a09      	ldr	r2, [pc, #36]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002468:	6353      	str	r3, [r2, #52]	; 0x34
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 800246c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246e:	4a06      	ldr	r2, [pc, #24]	; (8002488 <HAL_RCC_OscConfig+0x4d4>)
 8002470:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002474:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d024      	beq.n	80024c8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247e:	f7fe ffed 	bl	800145c <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002484:	e019      	b.n	80024ba <HAL_RCC_OscConfig+0x506>
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	08003ed4 	.word	0x08003ed4
 8002490:	20000014 	.word	0x20000014
 8002494:	20000018 	.word	0x20000018
 8002498:	42470020 	.word	0x42470020
 800249c:	42470680 	.word	0x42470680
 80024a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024a4:	f7fe ffda 	bl	800145c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e0a3      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024ba:	4b54      	ldr	r3, [pc, #336]	; (800260c <HAL_RCC_OscConfig+0x658>)
 80024bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0ee      	beq.n	80024a4 <HAL_RCC_OscConfig+0x4f0>
 80024c6:	e014      	b.n	80024f2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c8:	f7fe ffc8 	bl	800145c <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7fe ffc4 	bl	800145c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	; 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e08d      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024e6:	4b49      	ldr	r3, [pc, #292]	; (800260c <HAL_RCC_OscConfig+0x658>)
 80024e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1ee      	bne.n	80024d0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024f2:	7ffb      	ldrb	r3, [r7, #31]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d105      	bne.n	8002504 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f8:	4b44      	ldr	r3, [pc, #272]	; (800260c <HAL_RCC_OscConfig+0x658>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	4a43      	ldr	r2, [pc, #268]	; (800260c <HAL_RCC_OscConfig+0x658>)
 80024fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002502:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	2b00      	cmp	r3, #0
 800250a:	d079      	beq.n	8002600 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d056      	beq.n	80025c0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	2b02      	cmp	r3, #2
 8002518:	d13b      	bne.n	8002592 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251a:	4b3d      	ldr	r3, [pc, #244]	; (8002610 <HAL_RCC_OscConfig+0x65c>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe ff9c 	bl	800145c <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002528:	f7fe ff98 	bl	800145c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e063      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800253a:	4b34      	ldr	r3, [pc, #208]	; (800260c <HAL_RCC_OscConfig+0x658>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002546:	4b31      	ldr	r3, [pc, #196]	; (800260c <HAL_RCC_OscConfig+0x658>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	4319      	orrs	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	430b      	orrs	r3, r1
 800255e:	492b      	ldr	r1, [pc, #172]	; (800260c <HAL_RCC_OscConfig+0x658>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002564:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <HAL_RCC_OscConfig+0x65c>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7fe ff77 	bl	800145c <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002572:	f7fe ff73 	bl	800145c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e03e      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002584:	4b21      	ldr	r3, [pc, #132]	; (800260c <HAL_RCC_OscConfig+0x658>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x5be>
 8002590:	e036      	b.n	8002600 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002592:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <HAL_RCC_OscConfig+0x65c>)
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002598:	f7fe ff60 	bl	800145c <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a0:	f7fe ff5c 	bl	800145c <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e027      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_RCC_OscConfig+0x658>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1f0      	bne.n	80025a0 <HAL_RCC_OscConfig+0x5ec>
 80025be:	e01f      	b.n	8002600 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e01a      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025cc:	4b0f      	ldr	r3, [pc, #60]	; (800260c <HAL_RCC_OscConfig+0x658>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	429a      	cmp	r2, r3
 80025de:	d10d      	bne.n	80025fc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d106      	bne.n	80025fc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	42470060 	.word	0x42470060

08002614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e11a      	b.n	800285e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002628:	4b8f      	ldr	r3, [pc, #572]	; (8002868 <HAL_RCC_ClockConfig+0x254>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d919      	bls.n	800266a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_RCC_ClockConfig+0x34>
 800263c:	4b8a      	ldr	r3, [pc, #552]	; (8002868 <HAL_RCC_ClockConfig+0x254>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a89      	ldr	r2, [pc, #548]	; (8002868 <HAL_RCC_ClockConfig+0x254>)
 8002642:	f043 0304 	orr.w	r3, r3, #4
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b87      	ldr	r3, [pc, #540]	; (8002868 <HAL_RCC_ClockConfig+0x254>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 0201 	bic.w	r2, r3, #1
 8002650:	4985      	ldr	r1, [pc, #532]	; (8002868 <HAL_RCC_ClockConfig+0x254>)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002658:	4b83      	ldr	r3, [pc, #524]	; (8002868 <HAL_RCC_ClockConfig+0x254>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d001      	beq.n	800266a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0f9      	b.n	800285e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d008      	beq.n	8002688 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002676:	4b7d      	ldr	r3, [pc, #500]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	497a      	ldr	r1, [pc, #488]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 8002684:	4313      	orrs	r3, r2
 8002686:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	f000 808e 	beq.w	80027b2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800269e:	4b73      	ldr	r3, [pc, #460]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d121      	bne.n	80026ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0d7      	b.n	800285e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d107      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026b6:	4b6d      	ldr	r3, [pc, #436]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d115      	bne.n	80026ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0cb      	b.n	800285e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d107      	bne.n	80026de <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ce:	4b67      	ldr	r3, [pc, #412]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d109      	bne.n	80026ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e0bf      	b.n	800285e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026de:	4b63      	ldr	r3, [pc, #396]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0b7      	b.n	800285e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ee:	4b5f      	ldr	r3, [pc, #380]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f023 0203 	bic.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	495c      	ldr	r1, [pc, #368]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002700:	f7fe feac 	bl	800145c <HAL_GetTick>
 8002704:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d112      	bne.n	8002734 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800270e:	e00a      	b.n	8002726 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002710:	f7fe fea4 	bl	800145c <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	f241 3288 	movw	r2, #5000	; 0x1388
 800271e:	4293      	cmp	r3, r2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e09b      	b.n	800285e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002726:	4b51      	ldr	r3, [pc, #324]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 030c 	and.w	r3, r3, #12
 800272e:	2b08      	cmp	r3, #8
 8002730:	d1ee      	bne.n	8002710 <HAL_RCC_ClockConfig+0xfc>
 8002732:	e03e      	b.n	80027b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d112      	bne.n	8002762 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273e:	f7fe fe8d 	bl	800145c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e084      	b.n	800285e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002754:	4b45      	ldr	r3, [pc, #276]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b0c      	cmp	r3, #12
 800275e:	d1ee      	bne.n	800273e <HAL_RCC_ClockConfig+0x12a>
 8002760:	e027      	b.n	80027b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d11d      	bne.n	80027a6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800276a:	e00a      	b.n	8002782 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276c:	f7fe fe76 	bl	800145c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e06d      	b.n	800285e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002782:	4b3a      	ldr	r3, [pc, #232]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d1ee      	bne.n	800276c <HAL_RCC_ClockConfig+0x158>
 800278e:	e010      	b.n	80027b2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002790:	f7fe fe64 	bl	800145c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	; 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e05b      	b.n	800285e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80027a6:	4b31      	ldr	r3, [pc, #196]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1ee      	bne.n	8002790 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027b2:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <HAL_RCC_ClockConfig+0x254>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d219      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x1be>
 80027c6:	4b28      	ldr	r3, [pc, #160]	; (8002868 <HAL_RCC_ClockConfig+0x254>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a27      	ldr	r2, [pc, #156]	; (8002868 <HAL_RCC_ClockConfig+0x254>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b25      	ldr	r3, [pc, #148]	; (8002868 <HAL_RCC_ClockConfig+0x254>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 0201 	bic.w	r2, r3, #1
 80027da:	4923      	ldr	r1, [pc, #140]	; (8002868 <HAL_RCC_ClockConfig+0x254>)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b21      	ldr	r3, [pc, #132]	; (8002868 <HAL_RCC_ClockConfig+0x254>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e034      	b.n	800285e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4917      	ldr	r1, [pc, #92]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281e:	4b13      	ldr	r3, [pc, #76]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	490f      	ldr	r1, [pc, #60]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002832:	f000 f823 	bl	800287c <HAL_RCC_GetSysClockFreq>
 8002836:	4602      	mov	r2, r0
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <HAL_RCC_ClockConfig+0x258>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	490b      	ldr	r1, [pc, #44]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 8002844:	5ccb      	ldrb	r3, [r1, r3]
 8002846:	fa22 f303 	lsr.w	r3, r2, r3
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 800284c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800284e:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <HAL_RCC_ClockConfig+0x264>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fdb6 	bl	80013c4 <HAL_InitTick>
 8002858:	4603      	mov	r3, r0
 800285a:	72fb      	strb	r3, [r7, #11]

  return status;
 800285c:	7afb      	ldrb	r3, [r7, #11]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023c00 	.word	0x40023c00
 800286c:	40023800 	.word	0x40023800
 8002870:	08003ed4 	.word	0x08003ed4
 8002874:	20000014 	.word	0x20000014
 8002878:	20000018 	.word	0x20000018

0800287c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002880:	b092      	sub	sp, #72	; 0x48
 8002882:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002884:	4b79      	ldr	r3, [pc, #484]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800288a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800288c:	f003 030c 	and.w	r3, r3, #12
 8002890:	2b0c      	cmp	r3, #12
 8002892:	d00d      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x34>
 8002894:	2b0c      	cmp	r3, #12
 8002896:	f200 80d5 	bhi.w	8002a44 <HAL_RCC_GetSysClockFreq+0x1c8>
 800289a:	2b04      	cmp	r3, #4
 800289c:	d002      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x28>
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x2e>
 80028a2:	e0cf      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028a4:	4b72      	ldr	r3, [pc, #456]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80028a6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80028a8:	e0da      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028aa:	4b72      	ldr	r3, [pc, #456]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80028ac:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80028ae:	e0d7      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80028b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b2:	0c9b      	lsrs	r3, r3, #18
 80028b4:	f003 020f 	and.w	r2, r3, #15
 80028b8:	4b6f      	ldr	r3, [pc, #444]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80028ba:	5c9b      	ldrb	r3, [r3, r2]
 80028bc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80028be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c0:	0d9b      	lsrs	r3, r3, #22
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	3301      	adds	r3, #1
 80028c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ca:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d05d      	beq.n	8002992 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d8:	2200      	movs	r2, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	4611      	mov	r1, r2
 80028de:	4604      	mov	r4, r0
 80028e0:	460d      	mov	r5, r1
 80028e2:	4622      	mov	r2, r4
 80028e4:	462b      	mov	r3, r5
 80028e6:	f04f 0000 	mov.w	r0, #0
 80028ea:	f04f 0100 	mov.w	r1, #0
 80028ee:	0159      	lsls	r1, r3, #5
 80028f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028f4:	0150      	lsls	r0, r2, #5
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4621      	mov	r1, r4
 80028fc:	1a51      	subs	r1, r2, r1
 80028fe:	6139      	str	r1, [r7, #16]
 8002900:	4629      	mov	r1, r5
 8002902:	eb63 0301 	sbc.w	r3, r3, r1
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002914:	4659      	mov	r1, fp
 8002916:	018b      	lsls	r3, r1, #6
 8002918:	4651      	mov	r1, sl
 800291a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800291e:	4651      	mov	r1, sl
 8002920:	018a      	lsls	r2, r1, #6
 8002922:	46d4      	mov	ip, sl
 8002924:	ebb2 080c 	subs.w	r8, r2, ip
 8002928:	4659      	mov	r1, fp
 800292a:	eb63 0901 	sbc.w	r9, r3, r1
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800293a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800293e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002942:	4690      	mov	r8, r2
 8002944:	4699      	mov	r9, r3
 8002946:	4623      	mov	r3, r4
 8002948:	eb18 0303 	adds.w	r3, r8, r3
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	462b      	mov	r3, r5
 8002950:	eb49 0303 	adc.w	r3, r9, r3
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002962:	4629      	mov	r1, r5
 8002964:	024b      	lsls	r3, r1, #9
 8002966:	4620      	mov	r0, r4
 8002968:	4629      	mov	r1, r5
 800296a:	4604      	mov	r4, r0
 800296c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002970:	4601      	mov	r1, r0
 8002972:	024a      	lsls	r2, r1, #9
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297a:	2200      	movs	r2, #0
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
 800297e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002980:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002984:	f7fd fbfa 	bl	800017c <__aeabi_uldivmod>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4613      	mov	r3, r2
 800298e:	647b      	str	r3, [r7, #68]	; 0x44
 8002990:	e055      	b.n	8002a3e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002994:	2200      	movs	r2, #0
 8002996:	623b      	str	r3, [r7, #32]
 8002998:	627a      	str	r2, [r7, #36]	; 0x24
 800299a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800299e:	4642      	mov	r2, r8
 80029a0:	464b      	mov	r3, r9
 80029a2:	f04f 0000 	mov.w	r0, #0
 80029a6:	f04f 0100 	mov.w	r1, #0
 80029aa:	0159      	lsls	r1, r3, #5
 80029ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029b0:	0150      	lsls	r0, r2, #5
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	46c4      	mov	ip, r8
 80029b8:	ebb2 0a0c 	subs.w	sl, r2, ip
 80029bc:	4640      	mov	r0, r8
 80029be:	4649      	mov	r1, r9
 80029c0:	468c      	mov	ip, r1
 80029c2:	eb63 0b0c 	sbc.w	fp, r3, ip
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029d2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029d6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029da:	ebb2 040a 	subs.w	r4, r2, sl
 80029de:	eb63 050b 	sbc.w	r5, r3, fp
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	00eb      	lsls	r3, r5, #3
 80029ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029f0:	00e2      	lsls	r2, r4, #3
 80029f2:	4614      	mov	r4, r2
 80029f4:	461d      	mov	r5, r3
 80029f6:	4603      	mov	r3, r0
 80029f8:	18e3      	adds	r3, r4, r3
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	460b      	mov	r3, r1
 80029fe:	eb45 0303 	adc.w	r3, r5, r3
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a10:	4629      	mov	r1, r5
 8002a12:	028b      	lsls	r3, r1, #10
 8002a14:	4620      	mov	r0, r4
 8002a16:	4629      	mov	r1, r5
 8002a18:	4604      	mov	r4, r0
 8002a1a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002a1e:	4601      	mov	r1, r0
 8002a20:	028a      	lsls	r2, r1, #10
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a28:	2200      	movs	r2, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	61fa      	str	r2, [r7, #28]
 8002a2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a32:	f7fd fba3 	bl	800017c <__aeabi_uldivmod>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8002a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a40:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002a42:	e00d      	b.n	8002a60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	0b5b      	lsrs	r3, r3, #13
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a52:	3301      	adds	r3, #1
 8002a54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002a5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3748      	adds	r7, #72	; 0x48
 8002a66:	46bd      	mov	sp, r7
 8002a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	00f42400 	.word	0x00f42400
 8002a74:	007a1200 	.word	0x007a1200
 8002a78:	08003ec8 	.word	0x08003ec8

08002a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a80:	4b02      	ldr	r3, [pc, #8]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	20000014 	.word	0x20000014

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff2 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	08003ee4 	.word	0x08003ee4

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002abc:	f7ff ffde 	bl	8002a7c <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0adb      	lsrs	r3, r3, #11
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	08003ee4 	.word	0x08003ee4

08002ae0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b087      	sub	sp, #28
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002aec:	4b29      	ldr	r3, [pc, #164]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d12c      	bne.n	8002b52 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002af8:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002b04:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e016      	b.n	8002b3e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b10:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	4a1f      	ldr	r2, [pc, #124]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	6253      	str	r3, [r2, #36]	; 0x24
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002b28:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002b30:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002b44:	d105      	bne.n	8002b52 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b4c:	d101      	bne.n	8002b52 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002b4e:	2301      	movs	r3, #1
 8002b50:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d105      	bne.n	8002b64 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002b58:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a0f      	ldr	r2, [pc, #60]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b5e:	f043 0304 	orr.w	r3, r3, #4
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 0201 	bic.w	r2, r3, #1
 8002b6c:	490b      	ldr	r1, [pc, #44]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d001      	beq.n	8002b86 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40007000 	.word	0x40007000
 8002b9c:	40023c00 	.word	0x40023c00

08002ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e031      	b.n	8002c16 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7fe fb08 	bl	80011dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4610      	mov	r0, r2
 8002be0:	f000 f8e4 	bl	8002dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_TIM_ConfigClockSource+0x1c>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e0b4      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x186>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2202      	movs	r2, #2
 8002c46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c60:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c72:	d03e      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0xd4>
 8002c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c78:	f200 8087 	bhi.w	8002d8a <HAL_TIM_ConfigClockSource+0x16c>
 8002c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c80:	f000 8086 	beq.w	8002d90 <HAL_TIM_ConfigClockSource+0x172>
 8002c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c88:	d87f      	bhi.n	8002d8a <HAL_TIM_ConfigClockSource+0x16c>
 8002c8a:	2b70      	cmp	r3, #112	; 0x70
 8002c8c:	d01a      	beq.n	8002cc4 <HAL_TIM_ConfigClockSource+0xa6>
 8002c8e:	2b70      	cmp	r3, #112	; 0x70
 8002c90:	d87b      	bhi.n	8002d8a <HAL_TIM_ConfigClockSource+0x16c>
 8002c92:	2b60      	cmp	r3, #96	; 0x60
 8002c94:	d050      	beq.n	8002d38 <HAL_TIM_ConfigClockSource+0x11a>
 8002c96:	2b60      	cmp	r3, #96	; 0x60
 8002c98:	d877      	bhi.n	8002d8a <HAL_TIM_ConfigClockSource+0x16c>
 8002c9a:	2b50      	cmp	r3, #80	; 0x50
 8002c9c:	d03c      	beq.n	8002d18 <HAL_TIM_ConfigClockSource+0xfa>
 8002c9e:	2b50      	cmp	r3, #80	; 0x50
 8002ca0:	d873      	bhi.n	8002d8a <HAL_TIM_ConfigClockSource+0x16c>
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d058      	beq.n	8002d58 <HAL_TIM_ConfigClockSource+0x13a>
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d86f      	bhi.n	8002d8a <HAL_TIM_ConfigClockSource+0x16c>
 8002caa:	2b30      	cmp	r3, #48	; 0x30
 8002cac:	d064      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0x15a>
 8002cae:	2b30      	cmp	r3, #48	; 0x30
 8002cb0:	d86b      	bhi.n	8002d8a <HAL_TIM_ConfigClockSource+0x16c>
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d060      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0x15a>
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d867      	bhi.n	8002d8a <HAL_TIM_ConfigClockSource+0x16c>
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d05c      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0x15a>
 8002cbe:	2b10      	cmp	r3, #16
 8002cc0:	d05a      	beq.n	8002d78 <HAL_TIM_ConfigClockSource+0x15a>
 8002cc2:	e062      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cd4:	f000 f951 	bl	8002f7a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ce6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	609a      	str	r2, [r3, #8]
      break;
 8002cf0:	e04f      	b.n	8002d92 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d02:	f000 f93a 	bl	8002f7a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d14:	609a      	str	r2, [r3, #8]
      break;
 8002d16:	e03c      	b.n	8002d92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d24:	461a      	mov	r2, r3
 8002d26:	f000 f8b1 	bl	8002e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2150      	movs	r1, #80	; 0x50
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 f908 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d36:	e02c      	b.n	8002d92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d44:	461a      	mov	r2, r3
 8002d46:	f000 f8cf 	bl	8002ee8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2160      	movs	r1, #96	; 0x60
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 f8f8 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d56:	e01c      	b.n	8002d92 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d64:	461a      	mov	r2, r3
 8002d66:	f000 f891 	bl	8002e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2140      	movs	r1, #64	; 0x40
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 f8e8 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d76:	e00c      	b.n	8002d92 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4619      	mov	r1, r3
 8002d82:	4610      	mov	r0, r2
 8002d84:	f000 f8df 	bl	8002f46 <TIM_ITRx_SetConfig>
      break;
 8002d88:	e003      	b.n	8002d92 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8e:	e000      	b.n	8002d92 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc2:	d00f      	beq.n	8002de4 <TIM_Base_SetConfig+0x38>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4a2b      	ldr	r2, [pc, #172]	; (8002e74 <TIM_Base_SetConfig+0xc8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00b      	beq.n	8002de4 <TIM_Base_SetConfig+0x38>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a2a      	ldr	r2, [pc, #168]	; (8002e78 <TIM_Base_SetConfig+0xcc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d007      	beq.n	8002de4 <TIM_Base_SetConfig+0x38>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a29      	ldr	r2, [pc, #164]	; (8002e7c <TIM_Base_SetConfig+0xd0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d003      	beq.n	8002de4 <TIM_Base_SetConfig+0x38>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a28      	ldr	r2, [pc, #160]	; (8002e80 <TIM_Base_SetConfig+0xd4>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d108      	bne.n	8002df6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfc:	d017      	beq.n	8002e2e <TIM_Base_SetConfig+0x82>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a1c      	ldr	r2, [pc, #112]	; (8002e74 <TIM_Base_SetConfig+0xc8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <TIM_Base_SetConfig+0x82>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <TIM_Base_SetConfig+0xcc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00f      	beq.n	8002e2e <TIM_Base_SetConfig+0x82>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a1a      	ldr	r2, [pc, #104]	; (8002e7c <TIM_Base_SetConfig+0xd0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00b      	beq.n	8002e2e <TIM_Base_SetConfig+0x82>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <TIM_Base_SetConfig+0xd4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d007      	beq.n	8002e2e <TIM_Base_SetConfig+0x82>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a18      	ldr	r2, [pc, #96]	; (8002e84 <TIM_Base_SetConfig+0xd8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0x82>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a17      	ldr	r2, [pc, #92]	; (8002e88 <TIM_Base_SetConfig+0xdc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	615a      	str	r2, [r3, #20]
}
 8002e6a:	bf00      	nop
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000800 	.word	0x40000800
 8002e7c:	40000c00 	.word	0x40000c00
 8002e80:	40010800 	.word	0x40010800
 8002e84:	40010c00 	.word	0x40010c00
 8002e88:	40011000 	.word	0x40011000

08002e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f023 0201 	bic.w	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f023 030a 	bic.w	r3, r3, #10
 8002ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	621a      	str	r2, [r3, #32]
}
 8002ede:	bf00      	nop
 8002ee0:	371c      	adds	r7, #28
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	f023 0210 	bic.w	r2, r3, #16
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	031b      	lsls	r3, r3, #12
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	621a      	str	r2, [r3, #32]
}
 8002f3c:	bf00      	nop
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr

08002f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b085      	sub	sp, #20
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f043 0307 	orr.w	r3, r3, #7
 8002f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	609a      	str	r2, [r3, #8]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bc80      	pop	{r7}
 8002f78:	4770      	bx	lr

08002f7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b087      	sub	sp, #28
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	021a      	lsls	r2, r3, #8
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	609a      	str	r2, [r3, #8]
}
 8002fae:	bf00      	nop
 8002fb0:	371c      	adds	r7, #28
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr

08002fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e046      	b.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003012:	d00e      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a13      	ldr	r2, [pc, #76]	; (8003068 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d009      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d004      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a10      	ldr	r2, [pc, #64]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d10c      	bne.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	4313      	orrs	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	40000400 	.word	0x40000400
 800306c:	40000800 	.word	0x40000800
 8003070:	40010800 	.word	0x40010800

08003074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e042      	b.n	800310c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fe f8d0 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2224      	movs	r2, #36	; 0x24
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fdc5 	bl	8003c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b20      	cmp	r3, #32
 8003132:	d16d      	bne.n	8003210 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <HAL_UART_Transmit+0x2c>
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d101      	bne.n	8003144 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e066      	b.n	8003212 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2221      	movs	r2, #33	; 0x21
 800314e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003152:	f7fe f983 	bl	800145c <HAL_GetTick>
 8003156:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	88fa      	ldrh	r2, [r7, #6]
 8003162:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316c:	d108      	bne.n	8003180 <HAL_UART_Transmit+0x6c>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d104      	bne.n	8003180 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	61bb      	str	r3, [r7, #24]
 800317e:	e003      	b.n	8003188 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003184:	2300      	movs	r3, #0
 8003186:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003188:	e02a      	b.n	80031e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	2180      	movs	r1, #128	; 0x80
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fb14 	bl	80037c2 <UART_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e036      	b.n	8003212 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10b      	bne.n	80031c2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	461a      	mov	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	3302      	adds	r3, #2
 80031be:	61bb      	str	r3, [r7, #24]
 80031c0:	e007      	b.n	80031d2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	781a      	ldrb	r2, [r3, #0]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	3301      	adds	r3, #1
 80031d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1cf      	bne.n	800318a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	9300      	str	r3, [sp, #0]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2140      	movs	r1, #64	; 0x40
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 fae4 	bl	80037c2 <UART_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e006      	b.n	8003212 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2220      	movs	r2, #32
 8003208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	e000      	b.n	8003212 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003210:	2302      	movs	r3, #2
  }
}
 8003212:	4618      	mov	r0, r3
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	4613      	mov	r3, r2
 8003226:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b20      	cmp	r3, #32
 8003232:	d112      	bne.n	800325a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d002      	beq.n	8003240 <HAL_UART_Receive_IT+0x26>
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e00b      	b.n	800325c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	461a      	mov	r2, r3
 800324e:	68b9      	ldr	r1, [r7, #8]
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fb24 	bl	800389e <UART_Start_Receive_IT>
 8003256:	4603      	mov	r3, r0
 8003258:	e000      	b.n	800325c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800325a:	2302      	movs	r3, #2
  }
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b0ba      	sub	sp, #232	; 0xe8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800328a:	2300      	movs	r3, #0
 800328c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003290:	2300      	movs	r3, #0
 8003292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80032a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10f      	bne.n	80032ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d009      	beq.n	80032ca <HAL_UART_IRQHandler+0x66>
 80032b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fc01 	bl	8003aca <UART_Receive_IT>
      return;
 80032c8:	e25b      	b.n	8003782 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80032ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80de 	beq.w	8003490 <HAL_UART_IRQHandler+0x22c>
 80032d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80d1 	beq.w	8003490 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <HAL_UART_IRQHandler+0xae>
 80032fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003316:	f003 0304 	and.w	r3, r3, #4
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00b      	beq.n	8003336 <HAL_UART_IRQHandler+0xd2>
 800331e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	f043 0202 	orr.w	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00b      	beq.n	800335a <HAL_UART_IRQHandler+0xf6>
 8003342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	d005      	beq.n	800335a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	f043 0204 	orr.w	r2, r3, #4
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800335a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335e:	f003 0308 	and.w	r3, r3, #8
 8003362:	2b00      	cmp	r3, #0
 8003364:	d011      	beq.n	800338a <HAL_UART_IRQHandler+0x126>
 8003366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d005      	beq.n	800338a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	f043 0208 	orr.w	r2, r3, #8
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 81f2 	beq.w	8003778 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_UART_IRQHandler+0x14e>
 80033a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a4:	f003 0320 	and.w	r3, r3, #32
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 fb8c 	bl	8003aca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d103      	bne.n	80033de <HAL_UART_IRQHandler+0x17a>
 80033d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d04f      	beq.n	800347e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa96 	bl	8003910 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ee:	2b40      	cmp	r3, #64	; 0x40
 80033f0:	d141      	bne.n	8003476 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3314      	adds	r3, #20
 80033f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003408:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800340c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003410:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3314      	adds	r3, #20
 800341a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800341e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800342a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003436:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1d9      	bne.n	80033f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d013      	beq.n	800346e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	4a7e      	ldr	r2, [pc, #504]	; (8003644 <HAL_UART_IRQHandler+0x3e0>)
 800344c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe fbec 	bl	8001c30 <HAL_DMA_Abort_IT>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d016      	beq.n	800348c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003468:	4610      	mov	r0, r2
 800346a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346c:	e00e      	b.n	800348c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f993 	bl	800379a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003474:	e00a      	b.n	800348c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f98f 	bl	800379a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347c:	e006      	b.n	800348c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f98b 	bl	800379a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800348a:	e175      	b.n	8003778 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348c:	bf00      	nop
    return;
 800348e:	e173      	b.n	8003778 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	2b01      	cmp	r3, #1
 8003496:	f040 814f 	bne.w	8003738 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800349a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800349e:	f003 0310 	and.w	r3, r3, #16
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 8148 	beq.w	8003738 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 8141 	beq.w	8003738 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034b6:	2300      	movs	r3, #0
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d6:	2b40      	cmp	r3, #64	; 0x40
 80034d8:	f040 80b6 	bne.w	8003648 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8145 	beq.w	800377c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80034f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034fa:	429a      	cmp	r2, r3
 80034fc:	f080 813e 	bcs.w	800377c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003506:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2b20      	cmp	r3, #32
 8003510:	f000 8088 	beq.w	8003624 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	330c      	adds	r3, #12
 800351a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800352a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800352e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003532:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	330c      	adds	r3, #12
 800353c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003540:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003544:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003548:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800354c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003558:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1d9      	bne.n	8003514 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3314      	adds	r3, #20
 8003566:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003570:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3314      	adds	r3, #20
 8003580:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003584:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003588:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800358c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003590:	e841 2300 	strex	r3, r2, [r1]
 8003594:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e1      	bne.n	8003560 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3314      	adds	r3, #20
 80035a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80035ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3314      	adds	r3, #20
 80035bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035c8:	e841 2300 	strex	r3, r2, [r1]
 80035cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e3      	bne.n	800359c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	330c      	adds	r3, #12
 80035e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f4:	f023 0310 	bic.w	r3, r3, #16
 80035f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	330c      	adds	r3, #12
 8003602:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003606:	65ba      	str	r2, [r7, #88]	; 0x58
 8003608:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800360c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e3      	bne.n	80035e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe fac9 	bl	8001bb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003632:	b29b      	uxth	r3, r3
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	b29b      	uxth	r3, r3
 8003638:	4619      	mov	r1, r3
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8b6 	bl	80037ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003640:	e09c      	b.n	800377c <HAL_UART_IRQHandler+0x518>
 8003642:	bf00      	nop
 8003644:	080039d5 	.word	0x080039d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003650:	b29b      	uxth	r3, r3
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 808e 	beq.w	8003780 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003664:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8089 	beq.w	8003780 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	330c      	adds	r3, #12
 8003674:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003684:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003692:	647a      	str	r2, [r7, #68]	; 0x44
 8003694:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800369a:	e841 2300 	strex	r3, r2, [r1]
 800369e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80036a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e3      	bne.n	800366e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3314      	adds	r3, #20
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	623b      	str	r3, [r7, #32]
   return(result);
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3314      	adds	r3, #20
 80036c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036ca:	633a      	str	r2, [r7, #48]	; 0x30
 80036cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d2:	e841 2300 	strex	r3, r2, [r1]
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e3      	bne.n	80036a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	330c      	adds	r3, #12
 80036f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	e853 3f00 	ldrex	r3, [r3]
 80036fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0310 	bic.w	r3, r3, #16
 8003702:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	330c      	adds	r3, #12
 800370c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003710:	61fa      	str	r2, [r7, #28]
 8003712:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003714:	69b9      	ldr	r1, [r7, #24]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	e841 2300 	strex	r3, r2, [r1]
 800371c:	617b      	str	r3, [r7, #20]
   return(result);
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1e3      	bne.n	80036ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800372a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800372e:	4619      	mov	r1, r3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f83b 	bl	80037ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003736:	e023      	b.n	8003780 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003740:	2b00      	cmp	r3, #0
 8003742:	d009      	beq.n	8003758 <HAL_UART_IRQHandler+0x4f4>
 8003744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f953 	bl	80039fc <UART_Transmit_IT>
    return;
 8003756:	e014      	b.n	8003782 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00e      	beq.n	8003782 <HAL_UART_IRQHandler+0x51e>
 8003764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f992 	bl	8003a9a <UART_EndTransmit_IT>
    return;
 8003776:	e004      	b.n	8003782 <HAL_UART_IRQHandler+0x51e>
    return;
 8003778:	bf00      	nop
 800377a:	e002      	b.n	8003782 <HAL_UART_IRQHandler+0x51e>
      return;
 800377c:	bf00      	nop
 800377e:	e000      	b.n	8003782 <HAL_UART_IRQHandler+0x51e>
      return;
 8003780:	bf00      	nop
  }
}
 8003782:	37e8      	adds	r7, #232	; 0xe8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	bc80      	pop	{r7}
 8003798:	4770      	bx	lr

0800379a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b090      	sub	sp, #64	; 0x40
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d2:	e050      	b.n	8003876 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d04c      	beq.n	8003876 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80037e2:	f7fd fe3b 	bl	800145c <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d241      	bcs.n	8003876 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	330c      	adds	r3, #12
 80037f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	330c      	adds	r3, #12
 8003810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003812:	637a      	str	r2, [r7, #52]	; 0x34
 8003814:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003816:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800381a:	e841 2300 	strex	r3, r2, [r1]
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1e5      	bne.n	80037f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3314      	adds	r3, #20
 800382c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	613b      	str	r3, [r7, #16]
   return(result);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	f023 0301 	bic.w	r3, r3, #1
 800383c:	63bb      	str	r3, [r7, #56]	; 0x38
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3314      	adds	r3, #20
 8003844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003846:	623a      	str	r2, [r7, #32]
 8003848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	69f9      	ldr	r1, [r7, #28]
 800384c:	6a3a      	ldr	r2, [r7, #32]
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	61bb      	str	r3, [r7, #24]
   return(result);
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e5      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e00f      	b.n	8003896 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4013      	ands	r3, r2
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	429a      	cmp	r2, r3
 8003884:	bf0c      	ite	eq
 8003886:	2301      	moveq	r3, #1
 8003888:	2300      	movne	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	429a      	cmp	r2, r3
 8003892:	d09f      	beq.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3740      	adds	r7, #64	; 0x40
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800389e:	b480      	push	{r7}
 80038a0:	b085      	sub	sp, #20
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	4613      	mov	r3, r2
 80038aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	88fa      	ldrh	r2, [r7, #6]
 80038b6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2222      	movs	r2, #34	; 0x22
 80038c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695a      	ldr	r2, [r3, #20]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0220 	orr.w	r2, r2, #32
 8003902:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003910:	b480      	push	{r7}
 8003912:	b095      	sub	sp, #84	; 0x54
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800392e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003938:	643a      	str	r2, [r7, #64]	; 0x40
 800393a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800393e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3314      	adds	r3, #20
 8003952:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	61fb      	str	r3, [r7, #28]
   return(result);
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	64bb      	str	r3, [r7, #72]	; 0x48
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3314      	adds	r3, #20
 800396a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800396c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e5      	bne.n	800394c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	2b01      	cmp	r3, #1
 8003986:	d119      	bne.n	80039bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	330c      	adds	r3, #12
 800398e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	e853 3f00 	ldrex	r3, [r3]
 8003996:	60bb      	str	r3, [r7, #8]
   return(result);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f023 0310 	bic.w	r3, r3, #16
 800399e:	647b      	str	r3, [r7, #68]	; 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a8:	61ba      	str	r2, [r7, #24]
 80039aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ac:	6979      	ldr	r1, [r7, #20]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	e841 2300 	strex	r3, r2, [r1]
 80039b4:	613b      	str	r3, [r7, #16]
   return(result);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e5      	bne.n	8003988 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80039ca:	bf00      	nop
 80039cc:	3754      	adds	r7, #84	; 0x54
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f7ff fed3 	bl	800379a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b21      	cmp	r3, #33	; 0x21
 8003a0e:	d13e      	bne.n	8003a8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a18:	d114      	bne.n	8003a44 <UART_Transmit_IT+0x48>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d110      	bne.n	8003a44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	1c9a      	adds	r2, r3, #2
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	621a      	str	r2, [r3, #32]
 8003a42:	e008      	b.n	8003a56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	1c59      	adds	r1, r3, #1
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6211      	str	r1, [r2, #32]
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4619      	mov	r1, r3
 8003a64:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10f      	bne.n	8003a8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
  }
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fe64 	bl	8003788 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b08c      	sub	sp, #48	; 0x30
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b22      	cmp	r3, #34	; 0x22
 8003adc:	f040 80ae 	bne.w	8003c3c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae8:	d117      	bne.n	8003b1a <UART_Receive_IT+0x50>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d113      	bne.n	8003b1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b12:	1c9a      	adds	r2, r3, #2
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
 8003b18:	e026      	b.n	8003b68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b2c:	d007      	beq.n	8003b3e <UART_Receive_IT+0x74>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <UART_Receive_IT+0x82>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	701a      	strb	r2, [r3, #0]
 8003b4a:	e008      	b.n	8003b5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4619      	mov	r1, r3
 8003b76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d15d      	bne.n	8003c38 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0220 	bic.w	r2, r2, #32
 8003b8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695a      	ldr	r2, [r3, #20]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 0201 	bic.w	r2, r2, #1
 8003baa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d135      	bne.n	8003c2e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	330c      	adds	r3, #12
 8003bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	f023 0310 	bic.w	r3, r3, #16
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	330c      	adds	r3, #12
 8003be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be8:	623a      	str	r2, [r7, #32]
 8003bea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	69f9      	ldr	r1, [r7, #28]
 8003bee:	6a3a      	ldr	r2, [r7, #32]
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e5      	bne.n	8003bc8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d10a      	bne.n	8003c20 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c24:	4619      	mov	r1, r3
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7ff fdc0 	bl	80037ac <HAL_UARTEx_RxEventCallback>
 8003c2c:	e002      	b.n	8003c34 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fd fa4e 	bl	80010d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e002      	b.n	8003c3e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e000      	b.n	8003c3e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c3c:	2302      	movs	r3, #2
  }
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3730      	adds	r7, #48	; 0x30
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003c88:	f023 030c 	bic.w	r3, r3, #12
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	430b      	orrs	r3, r1
 8003c94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699a      	ldr	r2, [r3, #24]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a55      	ldr	r2, [pc, #340]	; (8003e08 <UART_SetConfig+0x1c0>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d103      	bne.n	8003cbe <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003cb6:	f7fe feff 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	e002      	b.n	8003cc4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003cbe:	f7fe fee7 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8003cc2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ccc:	d14c      	bne.n	8003d68 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009a      	lsls	r2, r3, #2
 8003cd8:	441a      	add	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	4a49      	ldr	r2, [pc, #292]	; (8003e0c <UART_SetConfig+0x1c4>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	0119      	lsls	r1, r3, #4
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009a      	lsls	r2, r3, #2
 8003cf8:	441a      	add	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d04:	4b41      	ldr	r3, [pc, #260]	; (8003e0c <UART_SetConfig+0x1c4>)
 8003d06:	fba3 0302 	umull	r0, r3, r3, r2
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2064      	movs	r0, #100	; 0x64
 8003d0e:	fb00 f303 	mul.w	r3, r0, r3
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	3332      	adds	r3, #50	; 0x32
 8003d18:	4a3c      	ldr	r2, [pc, #240]	; (8003e0c <UART_SetConfig+0x1c4>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d26:	4419      	add	r1, r3
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	009a      	lsls	r2, r3, #2
 8003d32:	441a      	add	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	005b      	lsls	r3, r3, #1
 8003d3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d3e:	4b33      	ldr	r3, [pc, #204]	; (8003e0c <UART_SetConfig+0x1c4>)
 8003d40:	fba3 0302 	umull	r0, r3, r3, r2
 8003d44:	095b      	lsrs	r3, r3, #5
 8003d46:	2064      	movs	r0, #100	; 0x64
 8003d48:	fb00 f303 	mul.w	r3, r0, r3
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	3332      	adds	r3, #50	; 0x32
 8003d52:	4a2e      	ldr	r2, [pc, #184]	; (8003e0c <UART_SetConfig+0x1c4>)
 8003d54:	fba2 2303 	umull	r2, r3, r2, r3
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	f003 0207 	and.w	r2, r3, #7
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	440a      	add	r2, r1
 8003d64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d66:	e04a      	b.n	8003dfe <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	009a      	lsls	r2, r3, #2
 8003d72:	441a      	add	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d7e:	4a23      	ldr	r2, [pc, #140]	; (8003e0c <UART_SetConfig+0x1c4>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	0119      	lsls	r1, r3, #4
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	009a      	lsls	r2, r3, #2
 8003d92:	441a      	add	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d9e:	4b1b      	ldr	r3, [pc, #108]	; (8003e0c <UART_SetConfig+0x1c4>)
 8003da0:	fba3 0302 	umull	r0, r3, r3, r2
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	2064      	movs	r0, #100	; 0x64
 8003da8:	fb00 f303 	mul.w	r3, r0, r3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	3332      	adds	r3, #50	; 0x32
 8003db2:	4a16      	ldr	r2, [pc, #88]	; (8003e0c <UART_SetConfig+0x1c4>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dbe:	4419      	add	r1, r3
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009a      	lsls	r2, r3, #2
 8003dca:	441a      	add	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dd6:	4b0d      	ldr	r3, [pc, #52]	; (8003e0c <UART_SetConfig+0x1c4>)
 8003dd8:	fba3 0302 	umull	r0, r3, r3, r2
 8003ddc:	095b      	lsrs	r3, r3, #5
 8003dde:	2064      	movs	r0, #100	; 0x64
 8003de0:	fb00 f303 	mul.w	r3, r0, r3
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	3332      	adds	r3, #50	; 0x32
 8003dea:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <UART_SetConfig+0x1c4>)
 8003dec:	fba2 2303 	umull	r2, r3, r2, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	f003 020f 	and.w	r2, r3, #15
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	609a      	str	r2, [r3, #8]
}
 8003dfe:	bf00      	nop
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40013800 	.word	0x40013800
 8003e0c:	51eb851f 	.word	0x51eb851f

08003e10 <memset>:
 8003e10:	4603      	mov	r3, r0
 8003e12:	4402      	add	r2, r0
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d100      	bne.n	8003e1a <memset+0xa>
 8003e18:	4770      	bx	lr
 8003e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e1e:	e7f9      	b.n	8003e14 <memset+0x4>

08003e20 <__libc_init_array>:
 8003e20:	b570      	push	{r4, r5, r6, lr}
 8003e22:	2600      	movs	r6, #0
 8003e24:	4d0c      	ldr	r5, [pc, #48]	; (8003e58 <__libc_init_array+0x38>)
 8003e26:	4c0d      	ldr	r4, [pc, #52]	; (8003e5c <__libc_init_array+0x3c>)
 8003e28:	1b64      	subs	r4, r4, r5
 8003e2a:	10a4      	asrs	r4, r4, #2
 8003e2c:	42a6      	cmp	r6, r4
 8003e2e:	d109      	bne.n	8003e44 <__libc_init_array+0x24>
 8003e30:	f000 f81a 	bl	8003e68 <_init>
 8003e34:	2600      	movs	r6, #0
 8003e36:	4d0a      	ldr	r5, [pc, #40]	; (8003e60 <__libc_init_array+0x40>)
 8003e38:	4c0a      	ldr	r4, [pc, #40]	; (8003e64 <__libc_init_array+0x44>)
 8003e3a:	1b64      	subs	r4, r4, r5
 8003e3c:	10a4      	asrs	r4, r4, #2
 8003e3e:	42a6      	cmp	r6, r4
 8003e40:	d105      	bne.n	8003e4e <__libc_init_array+0x2e>
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e48:	4798      	blx	r3
 8003e4a:	3601      	adds	r6, #1
 8003e4c:	e7ee      	b.n	8003e2c <__libc_init_array+0xc>
 8003e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e52:	4798      	blx	r3
 8003e54:	3601      	adds	r6, #1
 8003e56:	e7f2      	b.n	8003e3e <__libc_init_array+0x1e>
 8003e58:	08003ef4 	.word	0x08003ef4
 8003e5c:	08003ef4 	.word	0x08003ef4
 8003e60:	08003ef4 	.word	0x08003ef4
 8003e64:	08003ef8 	.word	0x08003ef8

08003e68 <_init>:
 8003e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e6a:	bf00      	nop
 8003e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6e:	bc08      	pop	{r3}
 8003e70:	469e      	mov	lr, r3
 8003e72:	4770      	bx	lr

08003e74 <_fini>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	bf00      	nop
 8003e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e7a:	bc08      	pop	{r3}
 8003e7c:	469e      	mov	lr, r3
 8003e7e:	4770      	bx	lr
